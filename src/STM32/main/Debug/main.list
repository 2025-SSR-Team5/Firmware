
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003134  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003234  08003234  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003234  08003234  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800323c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003248  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003248  00005080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb4  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0c  00000000  00000000  0000dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000600  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a94  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8c2  00000000  00000000  0002317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070876  00000000  00000000  0002ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f2b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac4  00000000  00000000  0009f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000a0dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031dc 	.word	0x080031dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080031dc 	.word	0x080031dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <do_instruction>:
 */

#include "initial_operation.h"
extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef do_instruction(uint8_t devstat){
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
	uint8_t instruction;
	HAL_StatusTypeDef result = HAL_ERROR;
 800022c:	230f      	movs	r3, #15
 800022e:	18fb      	adds	r3, r7, r3
 8000230:	2201      	movs	r2, #1
 8000232:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8000234:	2064      	movs	r0, #100	@ 0x64
 8000236:	f000 fb7b 	bl	8000930 <HAL_Delay>
	if(HAL_I2C_Slave_Receive(&hi2c1,&instruction, 1, HAL_MAX_DELAY) == HAL_OK){
 800023a:	2301      	movs	r3, #1
 800023c:	425b      	negs	r3, r3
 800023e:	240e      	movs	r4, #14
 8000240:	1939      	adds	r1, r7, r4
 8000242:	481e      	ldr	r0, [pc, #120]	@ (80002bc <do_instruction+0x9c>)
 8000244:	2201      	movs	r2, #1
 8000246:	f001 f8d3 	bl	80013f0 <HAL_I2C_Slave_Receive>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d12e      	bne.n	80002ac <do_instruction+0x8c>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800024e:	2380      	movs	r3, #128	@ 0x80
 8000250:	005a      	lsls	r2, r3, #1
 8000252:	23a0      	movs	r3, #160	@ 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	0011      	movs	r1, r2
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fea2 	bl	8000fa2 <HAL_GPIO_TogglePin>
		switch (instruction){
 800025e:	193b      	adds	r3, r7, r4
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d002      	beq.n	800026c <do_instruction+0x4c>
 8000266:	2b01      	cmp	r3, #1
 8000268:	d01f      	beq.n	80002aa <do_instruction+0x8a>
			break;
		case 0x01 :
			//ここにステッピングモーターの制御を記述
			break;
		default:
			break;
 800026a:	e01f      	b.n	80002ac <do_instruction+0x8c>
			result = Check_I2C_to_ESP32(devstat);
 800026c:	250f      	movs	r5, #15
 800026e:	197c      	adds	r4, r7, r5
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	0018      	movs	r0, r3
 8000276:	f000 f823 	bl	80002c0 <Check_I2C_to_ESP32>
 800027a:	0003      	movs	r3, r0
 800027c:	7023      	strb	r3, [r4, #0]
			if(result != HAL_OK){
 800027e:	197b      	adds	r3, r7, r5
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d008      	beq.n	8000298 <do_instruction+0x78>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000286:	2380      	movs	r3, #128	@ 0x80
 8000288:	011a      	lsls	r2, r3, #4
 800028a:	23a0      	movs	r3, #160	@ 0xa0
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe86 	bl	8000fa2 <HAL_GPIO_TogglePin>
			break;
 8000296:	e009      	b.n	80002ac <do_instruction+0x8c>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8000298:	2380      	movs	r3, #128	@ 0x80
 800029a:	015a      	lsls	r2, r3, #5
 800029c:	23a0      	movs	r3, #160	@ 0xa0
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fe7d 	bl	8000fa2 <HAL_GPIO_TogglePin>
			break;
 80002a8:	e000      	b.n	80002ac <do_instruction+0x8c>
			break;
 80002aa:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return result;
 80002ac:	230f      	movs	r3, #15
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	781b      	ldrb	r3, [r3, #0]
}
 80002b2:	0018      	movs	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b004      	add	sp, #16
 80002b8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	20000028 	.word	0x20000028

080002c0 <Check_I2C_to_ESP32>:
#include "stm32c0xx.h"
#include "string.h"
extern I2C_HandleTypeDef hi2c1;


HAL_StatusTypeDef Check_I2C_to_ESP32(uint8_t devstat){
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b08f      	sub	sp, #60	@ 0x3c
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	701a      	strb	r2, [r3, #0]
	uint32_t id_data[4];

	id_data[0] = HAL_GetDEVID();
 80002cc:	f000 fb54 	bl	8000978 <HAL_GetDEVID>
 80002d0:	0002      	movs	r2, r0
 80002d2:	2420      	movs	r4, #32
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	601a      	str	r2, [r3, #0]
	id_data[1] = HAL_GetUIDw0();
 80002d8:	f000 fb5a 	bl	8000990 <HAL_GetUIDw0>
 80002dc:	0002      	movs	r2, r0
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	605a      	str	r2, [r3, #4]
	id_data[2] = HAL_GetUIDw1();
 80002e2:	f000 fb5f 	bl	80009a4 <HAL_GetUIDw1>
 80002e6:	0002      	movs	r2, r0
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	609a      	str	r2, [r3, #8]
	id_data[3] = HAL_GetUIDw2();
 80002ec:	f000 fb64 	bl	80009b8 <HAL_GetUIDw2>
 80002f0:	0002      	movs	r2, r0
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	60da      	str	r2, [r3, #12]

	uint8_t buf[17];

	buf[0] = devstat;
 80002f6:	230c      	movs	r3, #12
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	1dfa      	adds	r2, r7, #7
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	701a      	strb	r2, [r3, #0]
	if (devstat == 0) {
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d136      	bne.n	8000376 <Check_I2C_to_ESP32+0xb6>
		for(int i=0; i < 4; i++){
 8000308:	2300      	movs	r3, #0
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
 800030c:	e02f      	b.n	800036e <Check_I2C_to_ESP32+0xae>
			buf[1 + 4*i] = id_data[i] & 0xFF;
 800030e:	2020      	movs	r0, #32
 8000310:	183b      	adds	r3, r7, r0
 8000312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	58d2      	ldr	r2, [r2, r3]
 8000318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	3301      	adds	r3, #1
 800031e:	b2d1      	uxtb	r1, r2
 8000320:	240c      	movs	r4, #12
 8000322:	193a      	adds	r2, r7, r4
 8000324:	54d1      	strb	r1, [r2, r3]
			buf[2 + 4*i] = id_data[i] >> 8;
 8000326:	183b      	adds	r3, r7, r0
 8000328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	58d3      	ldr	r3, [r2, r3]
 800032e:	0a1a      	lsrs	r2, r3, #8
 8000330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	3302      	adds	r3, #2
 8000336:	b2d1      	uxtb	r1, r2
 8000338:	193a      	adds	r2, r7, r4
 800033a:	54d1      	strb	r1, [r2, r3]
			buf[3 + 4*i] = id_data[i] >> 16;
 800033c:	183b      	adds	r3, r7, r0
 800033e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	58d3      	ldr	r3, [r2, r3]
 8000344:	0c1a      	lsrs	r2, r3, #16
 8000346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	3303      	adds	r3, #3
 800034c:	b2d1      	uxtb	r1, r2
 800034e:	193a      	adds	r2, r7, r4
 8000350:	54d1      	strb	r1, [r2, r3]
			buf[4 + 4*i] = id_data[i] >> 24;
 8000352:	183b      	adds	r3, r7, r0
 8000354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	58d3      	ldr	r3, [r2, r3]
 800035a:	0e1a      	lsrs	r2, r3, #24
 800035c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800035e:	3301      	adds	r3, #1
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	b2d1      	uxtb	r1, r2
 8000364:	193a      	adds	r2, r7, r4
 8000366:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i < 4; i++){
 8000368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800036a:	3301      	adds	r3, #1
 800036c:	637b      	str	r3, [r7, #52]	@ 0x34
 800036e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000370:	2b03      	cmp	r3, #3
 8000372:	ddcc      	ble.n	800030e <Check_I2C_to_ESP32+0x4e>
 8000374:	e00e      	b.n	8000394 <Check_I2C_to_ESP32+0xd4>
		}
	}else{
		for(int i=1;i < sizeof(buf);i++) buf[i] = '\0';
 8000376:	2301      	movs	r3, #1
 8000378:	633b      	str	r3, [r7, #48]	@ 0x30
 800037a:	e008      	b.n	800038e <Check_I2C_to_ESP32+0xce>
 800037c:	230c      	movs	r3, #12
 800037e:	18fa      	adds	r2, r7, r3
 8000380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000382:	18d3      	adds	r3, r2, r3
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800038a:	3301      	adds	r3, #1
 800038c:	633b      	str	r3, [r7, #48]	@ 0x30
 800038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000390:	2b10      	cmp	r3, #16
 8000392:	d9f3      	bls.n	800037c <Check_I2C_to_ESP32+0xbc>
	}

	HAL_Delay(10);
 8000394:	200a      	movs	r0, #10
 8000396:	f000 facb 	bl	8000930 <HAL_Delay>

	return HAL_I2C_Slave_Transmit(&hi2c1, buf, 17, 1000);
 800039a:	23fa      	movs	r3, #250	@ 0xfa
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	220c      	movs	r2, #12
 80003a0:	18b9      	adds	r1, r7, r2
 80003a2:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <Check_I2C_to_ESP32+0xf4>)
 80003a4:	2211      	movs	r2, #17
 80003a6:	f000 febd 	bl	8001124 <HAL_I2C_Slave_Transmit>
 80003aa:	0003      	movs	r3, r0
}
 80003ac:	0018      	movs	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b00f      	add	sp, #60	@ 0x3c
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	20000028 	.word	0x20000028

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fa3b 	bl	8000836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f808 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 f892 	bl	80004ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80003c8:	f000 f850 	bl	800046c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_instruction(0);
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff27 	bl	8000220 <do_instruction>
 80003d2:	e7fb      	b.n	80003cc <main+0x14>

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b08d      	sub	sp, #52	@ 0x34
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	2414      	movs	r4, #20
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	231c      	movs	r3, #28
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f002 fecd 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	003b      	movs	r3, r7
 80003ec:	0018      	movs	r0, r3
 80003ee:	2314      	movs	r3, #20
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f002 fec6 	bl	8003184 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80003f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <SystemClock_Config+0x94>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <SystemClock_Config+0x94>)
 80003fe:	2107      	movs	r1, #7
 8000400:	438a      	bics	r2, r1
 8000402:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2202      	movs	r2, #2
 8000408:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	193b      	adds	r3, r7, r4
 800040c:	2280      	movs	r2, #128	@ 0x80
 800040e:	0052      	lsls	r2, r2, #1
 8000410:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2280      	movs	r2, #128	@ 0x80
 8000416:	0152      	lsls	r2, r2, #5
 8000418:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2240      	movs	r2, #64	@ 0x40
 800041e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	f002 fa9c 	bl	8002960 <HAL_RCC_OscConfig>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800042c:	f000 f908 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	003b      	movs	r3, r7
 8000432:	2207      	movs	r2, #7
 8000434:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000442:	003b      	movs	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044e:	003b      	movs	r3, r7
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fc68 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800045c:	f000 f8f0 	bl	8000640 <Error_Handler>
  }
}
 8000460:	46c0      	nop			@ (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b00d      	add	sp, #52	@ 0x34
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	40022000 	.word	0x40022000

0800046c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_I2C1_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <MX_I2C1_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_I2C1_Init+0x74>)
 8000478:	4a1b      	ldr	r2, [pc, #108]	@ (80004e8 <MX_I2C1_Init+0x7c>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 100;
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_I2C1_Init+0x74>)
 800047e:	2264      	movs	r2, #100	@ 0x64
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000482:	4b17      	ldr	r3, [pc, #92]	@ (80004e0 <MX_I2C1_Init+0x74>)
 8000484:	2201      	movs	r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048e:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <MX_I2C1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000494:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_I2C1_Init+0x74>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fd95 	bl	8000fd8 <HAL_I2C_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b2:	f000 f8c5 	bl	8000640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <MX_I2C1_Init+0x74>)
 80004b8:	2100      	movs	r1, #0
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 f9b8 	bl	8002830 <HAL_I2CEx_ConfigAnalogFilter>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f000 f8bc 	bl	8000640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <MX_I2C1_Init+0x74>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 f9fb 	bl	80028c8 <HAL_I2CEx_ConfigDigitalFilter>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f8b3 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000028 	.word	0x20000028
 80004e4:	40005400 	.word	0x40005400
 80004e8:	00402d41 	.word	0x00402d41

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b089      	sub	sp, #36	@ 0x24
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	240c      	movs	r4, #12
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fe41 	bl	8003184 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b4e      	ldr	r3, [pc, #312]	@ (800063c <MX_GPIO_Init+0x150>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000506:	4b4d      	ldr	r3, [pc, #308]	@ (800063c <MX_GPIO_Init+0x150>)
 8000508:	2102      	movs	r1, #2
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
 800050e:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <MX_GPIO_Init+0x150>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000512:	2202      	movs	r2, #2
 8000514:	4013      	ands	r3, r2
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b48      	ldr	r3, [pc, #288]	@ (800063c <MX_GPIO_Init+0x150>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b47      	ldr	r3, [pc, #284]	@ (800063c <MX_GPIO_Init+0x150>)
 8000520:	2104      	movs	r1, #4
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b45      	ldr	r3, [pc, #276]	@ (800063c <MX_GPIO_Init+0x150>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2204      	movs	r2, #4
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b42      	ldr	r3, [pc, #264]	@ (800063c <MX_GPIO_Init+0x150>)
 8000534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000536:	4b41      	ldr	r3, [pc, #260]	@ (800063c <MX_GPIO_Init+0x150>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	635a      	str	r2, [r3, #52]	@ 0x34
 800053e:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <MX_GPIO_Init+0x150>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800054a:	23c8      	movs	r3, #200	@ 0xc8
 800054c:	0159      	lsls	r1, r3, #5
 800054e:	23a0      	movs	r3, #160	@ 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2200      	movs	r2, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fd07 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2202      	movs	r2, #2
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2202      	movs	r2, #2
 8000576:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	193a      	adds	r2, r7, r4
 800057a:	23a0      	movs	r3, #160	@ 0xa0
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fb87 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	222e      	movs	r2, #46	@ 0x2e
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2202      	movs	r2, #2
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2205      	movs	r2, #5
 80005a2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	193a      	adds	r2, r7, r4
 80005a6:	23a0      	movs	r3, #160	@ 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fb71 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2210      	movs	r2, #16
 80005b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2202      	movs	r2, #2
 80005bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2204      	movs	r2, #4
 80005ce:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	193a      	adds	r2, r7, r4
 80005d2:	23a0      	movs	r3, #160	@ 0xa0
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fb5b 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	22c0      	movs	r2, #192	@ 0xc0
 80005e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2202      	movs	r2, #2
 80005e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2201      	movs	r2, #1
 80005fa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	193a      	adds	r2, r7, r4
 80005fe:	23a0      	movs	r3, #160	@ 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fb45 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	22c8      	movs	r2, #200	@ 0xc8
 8000610:	0152      	lsls	r2, r2, #5
 8000612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2201      	movs	r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	187a      	adds	r2, r7, r1
 8000628:	23a0      	movs	r3, #160	@ 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fb30 	bl	8000c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b009      	add	sp, #36	@ 0x24
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x44>)
 8000654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <HAL_MspInit+0x44>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	641a      	str	r2, [r3, #64]	@ 0x40
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x44>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_MspInit+0x44>)
 800066c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_MspInit+0x44>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	0549      	lsls	r1, r1, #21
 8000674:	430a      	orrs	r2, r1
 8000676:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <HAL_MspInit+0x44>)
 800067a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	055b      	lsls	r3, r3, #21
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b091      	sub	sp, #68	@ 0x44
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	232c      	movs	r3, #44	@ 0x2c
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	0018      	movs	r0, r3
 80006a2:	2314      	movs	r3, #20
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 fd6c 	bl	8003184 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	2410      	movs	r4, #16
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	0018      	movs	r0, r3
 80006b2:	231c      	movs	r3, #28
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f002 fd64 	bl	8003184 <memset>
  if(hi2c->Instance==I2C1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a26      	ldr	r2, [pc, #152]	@ (800075c <HAL_I2C_MspInit+0xc8>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d145      	bne.n	8000752 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fc69 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006de:	f7ff ffaf 	bl	8000640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f2:	2202      	movs	r2, #2
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80006fa:	212c      	movs	r1, #44	@ 0x2c
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	22c0      	movs	r2, #192	@ 0xc0
 8000700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2212      	movs	r2, #18
 8000706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2206      	movs	r2, #6
 8000718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	187b      	adds	r3, r7, r1
 800071c:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <HAL_I2C_MspInit+0xd0>)
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f000 fab7 	bl	8000c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 8000728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	0389      	lsls	r1, r1, #14
 8000730:	430a      	orrs	r2, r1
 8000732:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_I2C_MspInit+0xcc>)
 8000736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	039b      	lsls	r3, r3, #14
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2017      	movs	r0, #23
 8000748:	f000 f9ec 	bl	8000b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800074c:	2017      	movs	r0, #23
 800074e:	f000 f9fe 	bl	8000b4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b011      	add	sp, #68	@ 0x44
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40005400 	.word	0x40005400
 8000760:	40021000 	.word	0x40021000
 8000764:	50000400 	.word	0x50000400

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8b2 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <I2C1_IRQHandler+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	699a      	ldr	r2, [r3, #24]
 80007a6:	23e0      	movs	r3, #224	@ 0xe0
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4013      	ands	r3, r2
 80007ac:	d004      	beq.n	80007b8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <I2C1_IRQHandler+0x2c>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 ff53 	bl	800165c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80007b6:	e003      	b.n	80007c0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <I2C1_IRQHandler+0x2c>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 ff34 	bl	8001628 <HAL_I2C_EV_IRQHandler>
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	20000028 	.word	0x20000028

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <SystemInit+0x14>)
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	0512      	lsls	r2, r2, #20
 80007d6:	609a      	str	r2, [r3, #8]
#endif
}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e4:	480d      	ldr	r0, [pc, #52]	@ (800081c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e8:	f7ff fff0 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ee:	e003      	b.n	80007f8 <LoopCopyDataInit>

080007f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007f6:	3104      	adds	r1, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f8:	480a      	ldr	r0, [pc, #40]	@ (8000824 <LoopForever+0xa>)
  ldr r3, =_edata
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <LoopForever+0xe>)
  adds r2, r0, r1
 80007fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000800:	d3f6      	bcc.n	80007f0 <CopyDataInit>
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopForever+0x12>)
  b LoopFillZerobss
 8000804:	e002      	b.n	800080c <LoopFillZerobss>

08000806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  str  r3, [r2]
 8000808:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080a:	3204      	adds	r2, #4

0800080c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <LoopForever+0x16>)
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000810:	d3f9      	bcc.n	8000806 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000812:	f002 fcbf 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fdcf 	bl	80003b8 <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   r0, =_estack
 800081c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000820:	0800323c 	.word	0x0800323c
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000828:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000830:	20000080 	.word	0x20000080

08000834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_IRQHandler>

08000836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000842:	2003      	movs	r0, #3
 8000844:	f000 f80e 	bl	8000864 <HAL_InitTick>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d003      	beq.n	8000854 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e001      	b.n	8000858 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000854:	f7ff fefa 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_InitTick+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d02b      	beq.n	80008d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_InitTick+0x8c>)
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_InitTick+0x88>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0019      	movs	r1, r3
 8000886:	23fa      	movs	r3, #250	@ 0xfa
 8000888:	0098      	lsls	r0, r3, #2
 800088a:	f7ff fc3d 	bl	8000108 <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	0019      	movs	r1, r3
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff fc38 	bl	8000108 <__udivsi3>
 8000898:	0003      	movs	r3, r0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f967 	bl	8000b6e <HAL_SYSTICK_Config>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d112      	bne.n	80008ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d80a      	bhi.n	80008c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f936 	bl	8000b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_InitTick+0x90>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e00d      	b.n	80008dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e008      	b.n	80008dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ca:	230f      	movs	r3, #15
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e003      	b.n	80008dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d4:	230f      	movs	r3, #15
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b005      	add	sp, #20
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	18d2      	adds	r2, r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_IncTick+0x20>)
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000008 	.word	0x20000008
 8000918:	2000007c 	.word	0x2000007c

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	@ (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	2000007c 	.word	0x2000007c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	0003      	movs	r3, r0
 800093e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001a      	movs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	189b      	adds	r3, r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	0002      	movs	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  return ((DBG->IDCODE) & DBG_IDCODE_DEV_ID);
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetDEVID+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	051b      	lsls	r3, r3, #20
 8000982:	0d1b      	lsrs	r3, r3, #20
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	40015800 	.word	0x40015800

08000990 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <HAL_GetUIDw0+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	1fff7550 	.word	0x1fff7550

080009a4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80009a8:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HAL_GetUIDw1+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	1fff7554 	.word	0x1fff7554

080009b8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <HAL_GetUIDw2+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	1fff7558 	.word	0x1fff7558

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009de:	d809      	bhi.n	80009f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	001a      	movs	r2, r3
 80009e6:	231f      	movs	r3, #31
 80009e8:	401a      	ands	r2, r3
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <__NVIC_EnableIRQ+0x30>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	4091      	lsls	r1, r2
 80009f0:	000a      	movs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a14:	d828      	bhi.n	8000a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	33c0      	adds	r3, #192	@ 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	589b      	ldr	r3, [r3, r2]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	33c0      	adds	r3, #192	@ 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a66:	e031      	b.n	8000acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0019      	movs	r1, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	400b      	ands	r3, r1
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3306      	adds	r3, #6
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3304      	adds	r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	@ 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	@ 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18c3      	adds	r3, r0, r3
 8000ac8:	3304      	adds	r3, #4
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d301      	bcc.n	8000af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af0:	2301      	movs	r3, #1
 8000af2:	e010      	b.n	8000b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <SysTick_Config+0x44>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff7c 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SysTick_Config+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SysTick_Config+0x44>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	0002      	movs	r2, r0
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff33 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffaf 	bl	8000adc <SysTick_Config>
 8000b7e:	0003      	movs	r3, r0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2224      	movs	r2, #36	@ 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2224      	movs	r2, #36	@ 0x24
 8000ba4:	5c9b      	ldrb	r3, [r3, r2]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_DMA_Abort_IT+0x26>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e05e      	b.n	8000c6c <HAL_DMA_Abort_IT+0xe4>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2224      	movs	r2, #36	@ 0x24
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2225      	movs	r2, #37	@ 0x25
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000bc8:	230f      	movs	r3, #15
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e049      	b.n	8000c66 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	210e      	movs	r1, #14
 8000bde:	438a      	bics	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfc:	491d      	ldr	r1, [pc, #116]	@ (8000c74 <HAL_DMA_Abort_IT+0xec>)
 8000bfe:	400a      	ands	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_DMA_Abort_IT+0xf0>)
 8000c04:	6859      	ldr	r1, [r3, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	221c      	movs	r2, #28
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	409a      	lsls	r2, r3
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_DMA_Abort_IT+0xf0>)
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00c      	beq.n	8000c44 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c34:	490f      	ldr	r1, [pc, #60]	@ (8000c74 <HAL_DMA_Abort_IT+0xec>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2225      	movs	r2, #37	@ 0x25
 8000c48:	2101      	movs	r1, #1
 8000c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2224      	movs	r2, #36	@ 0x24
 8000c50:	2100      	movs	r1, #0
 8000c52:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	0010      	movs	r0, r2
 8000c64:	4798      	blx	r3
    }
  }
  return status;
 8000c66:	230f      	movs	r3, #15
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b004      	add	sp, #16
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	fffffeff 	.word	0xfffffeff
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2225      	movs	r2, #37	@ 0x25
 8000c88:	5c9b      	ldrb	r3, [r3, r2]
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ca2:	e14d      	b.n	8000f40 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <HAL_GPIO_Init+0x28>
 8000cba:	e13e      	b.n	8000f3a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x38>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b12      	cmp	r3, #18
 8000cca:	d125      	bne.n	8000d18 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	58d3      	ldr	r3, [r2, r3]
 8000cd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2207      	movs	r2, #7
 8000cde:	4013      	ands	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2107      	movs	r1, #7
 8000cfc:	400b      	ands	r3, r1
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	6979      	ldr	r1, [r7, #20]
 8000d16:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	401a      	ands	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00b      	beq.n	8000d6c <HAL_GPIO_Init+0xd8>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	2b11      	cmp	r3, #17
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b12      	cmp	r3, #18
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	4013      	ands	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	2201      	movs	r2, #1
 8000dba:	401a      	ands	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d017      	beq.n	8000e06 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	43da      	mvns	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4013      	ands	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	055b      	lsls	r3, r3, #21
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x180>
 8000e12:	e092      	b.n	8000f3a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e14:	4a50      	ldr	r2, [pc, #320]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3318      	adds	r3, #24
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	589b      	ldr	r3, [r3, r2]
 8000e20:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	23a0      	movs	r3, #160	@ 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x1d6>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a45      	ldr	r2, [pc, #276]	@ (8000f5c <HAL_GPIO_Init+0x2c8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x1d2>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a44      	ldr	r2, [pc, #272]	@ (8000f60 <HAL_GPIO_Init+0x2cc>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x1ce>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a43      	ldr	r2, [pc, #268]	@ (8000f64 <HAL_GPIO_Init+0x2d0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x1ca>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x1d8>
 8000e5e:	2306      	movs	r3, #6
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x1d8>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x1d8>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x1d8>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	2103      	movs	r1, #3
 8000e70:	400a      	ands	r2, r1
 8000e72:	00d2      	lsls	r2, r2, #3
 8000e74:	4093      	lsls	r3, r2
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e7c:	4936      	ldr	r1, [pc, #216]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3318      	adds	r3, #24
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000e8a:	4a33      	ldr	r2, [pc, #204]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	025b      	lsls	r3, r3, #9
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000eb0:	4929      	ldr	r1, [pc, #164]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000eb8:	4a27      	ldr	r2, [pc, #156]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000eba:	2384      	movs	r3, #132	@ 0x84
 8000ebc:	58d3      	ldr	r3, [r2, r3]
 8000ebe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000ede:	491e      	ldr	r1, [pc, #120]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000ee0:	2284      	movs	r2, #132	@ 0x84
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	2380      	movs	r3, #128	@ 0x80
 8000efc:	035b      	lsls	r3, r3, #13
 8000efe:	4013      	ands	r3, r2
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	2380      	movs	r3, #128	@ 0x80
 8000f26:	039b      	lsls	r3, r3, #14
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_GPIO_Init+0x2c4>)
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	40da      	lsrs	r2, r3
 8000f48:	1e13      	subs	r3, r2, #0
 8000f4a:	d000      	beq.n	8000f4e <HAL_GPIO_Init+0x2ba>
 8000f4c:	e6aa      	b.n	8000ca4 <HAL_GPIO_Init+0x10>
  }
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b006      	add	sp, #24
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021800 	.word	0x40021800
 8000f5c:	50000400 	.word	0x50000400
 8000f60:	50000800 	.word	0x50000800
 8000f64:	50001400 	.word	0x50001400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	0008      	movs	r0, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	1c02      	adds	r2, r0, #0
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	1c7b      	adds	r3, r7, #1
 8000f7c:	1c0a      	adds	r2, r1, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f80:	1c7b      	adds	r3, r7, #1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f90:	e003      	b.n	8000f9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f92:	1cbb      	adds	r3, r7, #2
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	000a      	movs	r2, r1
 8000fac:	1cbb      	adds	r3, r7, #2
 8000fae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb6:	1cbb      	adds	r3, r7, #2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	041a      	lsls	r2, r3, #16
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	1cb9      	adds	r1, r7, #2
 8000fc6:	8809      	ldrh	r1, [r1, #0]
 8000fc8:	400b      	ands	r3, r1
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e08f      	b.n	800110a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2241      	movs	r2, #65	@ 0x41
 8000fee:	5c9b      	ldrb	r3, [r3, r2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2240      	movs	r2, #64	@ 0x40
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff fb47 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2241      	movs	r2, #65	@ 0x41
 800100a:	2124      	movs	r1, #36	@ 0x24
 800100c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	438a      	bics	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	493b      	ldr	r1, [pc, #236]	@ (8001114 <HAL_I2C_Init+0x13c>)
 8001028:	400a      	ands	r2, r1
 800102a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4938      	ldr	r1, [pc, #224]	@ (8001118 <HAL_I2C_Init+0x140>)
 8001038:	400a      	ands	r2, r1
 800103a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d108      	bne.n	8001056 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0209      	lsls	r1, r1, #8
 8001050:	430a      	orrs	r2, r1
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	e007      	b.n	8001066 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2184      	movs	r1, #132	@ 0x84
 8001060:	0209      	lsls	r1, r1, #8
 8001062:	430a      	orrs	r2, r1
 8001064:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d109      	bne.n	8001082 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	0109      	lsls	r1, r1, #4
 800107c:	430a      	orrs	r2, r1
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	e007      	b.n	8001092 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4923      	ldr	r1, [pc, #140]	@ (800111c <HAL_I2C_Init+0x144>)
 800108e:	400a      	ands	r2, r1
 8001090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4920      	ldr	r1, [pc, #128]	@ (8001120 <HAL_I2C_Init+0x148>)
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	491a      	ldr	r1, [pc, #104]	@ (8001118 <HAL_I2C_Init+0x140>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69d9      	ldr	r1, [r3, #28]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2241      	movs	r2, #65	@ 0x41
 80010f6:	2120      	movs	r1, #32
 80010f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2242      	movs	r2, #66	@ 0x42
 8001104:	2100      	movs	r1, #0
 8001106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f0ffffff 	.word	0xf0ffffff
 8001118:	ffff7fff 	.word	0xffff7fff
 800111c:	fffff7ff 	.word	0xfffff7ff
 8001120:	02008000 	.word	0x02008000

08001124 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2241      	movs	r2, #65	@ 0x41
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b20      	cmp	r3, #32
 800113e:	d000      	beq.n	8001142 <HAL_I2C_Slave_Transmit+0x1e>
 8001140:	e14f      	b.n	80013e2 <HAL_I2C_Slave_Transmit+0x2be>
  {
    if ((pData == NULL) || (Size == 0U))
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_I2C_Slave_Transmit+0x2c>
 8001148:	1dbb      	adds	r3, r7, #6
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e143      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2240      	movs	r2, #64	@ 0x40
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_I2C_Slave_Transmit+0x46>
 8001166:	2302      	movs	r3, #2
 8001168:	e13c      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	2101      	movs	r1, #1
 8001170:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001172:	f7ff fbd3 	bl	800091c <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2241      	movs	r2, #65	@ 0x41
 800117e:	2121      	movs	r1, #33	@ 0x21
 8001180:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2242      	movs	r2, #66	@ 0x42
 8001186:	2120      	movs	r1, #32
 8001188:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1dba      	adds	r2, r7, #6
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	498f      	ldr	r1, [pc, #572]	@ (80013ec <HAL_I2C_Slave_Transmit+0x2c8>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	029b      	lsls	r3, r3, #10
 80011bc:	429a      	cmp	r2, r3
 80011be:	d111      	bne.n	80011e4 <HAL_I2C_Slave_Transmit+0xc0>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	0013      	movs	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	2108      	movs	r1, #8
 80011f2:	f001 f841 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d00e      	beq.n	8001218 <HAL_I2C_Slave_Transmit+0xf4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2180      	movs	r1, #128	@ 0x80
 8001206:	0209      	lsls	r1, r1, #8
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 fff1 	bl	80021f6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0e5      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2208      	movs	r2, #8
 800121e:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d11d      	bne.n	8001264 <HAL_I2C_Slave_Transmit+0x140>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	0013      	movs	r3, r2
 8001232:	2200      	movs	r2, #0
 8001234:	2108      	movs	r1, #8
 8001236:	f001 f81f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d00e      	beq.n	800125c <HAL_I2C_Slave_Transmit+0x138>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2180      	movs	r1, #128	@ 0x80
 800124a:	0209      	lsls	r1, r1, #8
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	0018      	movs	r0, r3
 8001254:	f000 ffcf 	bl	80021f6 <I2C_Flush_TXDR>

        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0c3      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2208      	movs	r2, #8
 8001262:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	0259      	lsls	r1, r3, #9
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	0013      	movs	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	f001 f800 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d033      	beq.n	80012e4 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	0209      	lsls	r1, r1, #8
 800128a:	430a      	orrs	r2, r1
 800128c:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	0018      	movs	r0, r3
 8001292:	f000 ffb0 	bl	80021f6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0a4      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 f841 	bl	8002328 <I2C_WaitOnTXISFlagUntilTimeout>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d00a      	beq.n	80012c0 <HAL_I2C_Slave_Transmit+0x19c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	0209      	lsls	r1, r1, #8
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e091      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1d5      	bne.n	800129a <HAL_I2C_Slave_Transmit+0x176>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 80012ee:	2513      	movs	r5, #19
 80012f0:	197c      	adds	r4, r7, r5
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	0013      	movs	r3, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	2110      	movs	r1, #16
 8001300:	f000 ffba 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]

    if (error != HAL_OK)
 8001308:	197b      	adds	r3, r7, r5
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01b      	beq.n	8001348 <HAL_I2C_Slave_Transmit+0x224>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 8001310:	2110      	movs	r1, #16
 8001312:	187b      	adds	r3, r7, r1
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8001318:	801a      	strh	r2, [r3, #0]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	2b04      	cmp	r3, #4
 8001320:	d107      	bne.n	8001332 <HAL_I2C_Slave_Transmit+0x20e>
 8001322:	187b      	adds	r3, r7, r1
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <HAL_I2C_Slave_Transmit+0x20e>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001330:	e029      	b.n	8001386 <HAL_I2C_Slave_Transmit+0x262>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	0209      	lsls	r1, r1, #8
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e04d      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0018      	movs	r0, r3
 800134c:	f000 ff53 	bl	80021f6 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2210      	movs	r2, #16
 8001356:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	0018      	movs	r0, r3
 8001360:	f001 f828 	bl	80023b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d00a      	beq.n	800137e <HAL_I2C_Slave_Transmit+0x25a>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2180      	movs	r1, #128	@ 0x80
 8001374:	0209      	lsls	r1, r1, #8
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e032      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	0219      	lsls	r1, r3, #8
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	0013      	movs	r3, r2
 8001394:	2201      	movs	r2, #1
 8001396:	f000 ff6f 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d00a      	beq.n	80013b4 <HAL_I2C_Slave_Transmit+0x290>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0209      	lsls	r1, r1, #8
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e017      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2180      	movs	r1, #128	@ 0x80
 80013c0:	0209      	lsls	r1, r1, #8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2241      	movs	r2, #65	@ 0x41
 80013ca:	2120      	movs	r1, #32
 80013cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2242      	movs	r2, #66	@ 0x42
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2240      	movs	r2, #64	@ 0x40
 80013da:	2100      	movs	r1, #0
 80013dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_I2C_Slave_Transmit+0x2c0>
  }
  else
  {
    return HAL_BUSY;
 80013e2:	2302      	movs	r3, #2
  }
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b006      	add	sp, #24
 80013ea:	bdb0      	pop	{r4, r5, r7, pc}
 80013ec:	ffff7fff 	.word	0xffff7fff

080013f0 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2241      	movs	r2, #65	@ 0x41
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b20      	cmp	r3, #32
 800140a:	d000      	beq.n	800140e <HAL_I2C_Slave_Receive+0x1e>
 800140c:	e104      	b.n	8001618 <HAL_I2C_Slave_Receive+0x228>
  {
    if ((pData == NULL) || (Size == 0U))
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_I2C_Slave_Receive+0x2c>
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_I2C_Slave_Receive+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0f8      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2240      	movs	r2, #64	@ 0x40
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_I2C_Slave_Receive+0x46>
 8001432:	2302      	movs	r3, #2
 8001434:	e0f1      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2240      	movs	r2, #64	@ 0x40
 800143a:	2101      	movs	r1, #1
 800143c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800143e:	f7ff fa6d 	bl	800091c <HAL_GetTick>
 8001442:	0003      	movs	r3, r0
 8001444:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2241      	movs	r2, #65	@ 0x41
 800144a:	2122      	movs	r1, #34	@ 0x22
 800144c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2242      	movs	r2, #66	@ 0x42
 8001452:	2120      	movs	r1, #32
 8001454:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1dba      	adds	r2, r7, #6
 8001466:	8812      	ldrh	r2, [r2, #0]
 8001468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4967      	ldr	r1, [pc, #412]	@ (8001624 <HAL_I2C_Slave_Receive+0x234>)
 8001486:	400a      	ands	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	0013      	movs	r3, r2
 8001494:	2200      	movs	r2, #0
 8001496:	2108      	movs	r1, #8
 8001498:	f000 feee 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d00a      	beq.n	80014b6 <HAL_I2C_Slave_Receive+0xc6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	0209      	lsls	r1, r1, #8
 80014ae:	430a      	orrs	r2, r1
 80014b0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0b1      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2208      	movs	r2, #8
 80014bc:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	0259      	lsls	r1, r3, #9
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	0013      	movs	r3, r2
 80014cc:	2201      	movs	r2, #1
 80014ce:	f000 fed3 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d056      	beq.n	8001584 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	0209      	lsls	r1, r1, #8
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e096      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 ffa2 	bl	800243c <I2C_WaitOnRXNEFlagUntilTimeout>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d02a      	beq.n	8001552 <HAL_I2C_Slave_Receive+0x162>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	0209      	lsls	r1, r1, #8
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
 8001518:	2b04      	cmp	r3, #4
 800151a:	d118      	bne.n	800154e <HAL_I2C_Slave_Receive+0x15e>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001546:	3b01      	subs	r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e063      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ae      	bne.n	80014ec <HAL_I2C_Slave_Receive+0xfc>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	6839      	ldr	r1, [r7, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 ff0d 	bl	80023b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d00a      	beq.n	80015b4 <HAL_I2C_Slave_Receive+0x1c4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	0209      	lsls	r1, r1, #8
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2220      	movs	r2, #32
 80015ba:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	0219      	lsls	r1, r3, #8
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	0013      	movs	r3, r2
 80015ca:	2201      	movs	r2, #1
 80015cc:	f000 fe54 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d00a      	beq.n	80015ea <HAL_I2C_Slave_Receive+0x1fa>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	0209      	lsls	r1, r1, #8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e017      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2180      	movs	r1, #128	@ 0x80
 80015f6:	0209      	lsls	r1, r1, #8
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2241      	movs	r2, #65	@ 0x41
 8001600:	2120      	movs	r1, #32
 8001602:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2242      	movs	r2, #66	@ 0x42
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <HAL_I2C_Slave_Receive+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
  }
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b006      	add	sp, #24
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	ffff7fff 	.word	0xffff7fff

08001628 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
  }
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	001a      	movs	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	4013      	ands	r3, r2
 800167e:	d010      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	09db      	lsrs	r3, r3, #7
 8001684:	001a      	movs	r2, r3
 8001686:	2301      	movs	r3, #1
 8001688:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800168a:	d00a      	beq.n	80016a2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	2201      	movs	r2, #1
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	0052      	lsls	r2, r2, #1
 80016a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	0a9b      	lsrs	r3, r3, #10
 80016a6:	001a      	movs	r2, r3
 80016a8:	2301      	movs	r3, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d010      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	09db      	lsrs	r3, r3, #7
 80016b2:	001a      	movs	r2, r3
 80016b4:	2301      	movs	r3, #1
 80016b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016b8:	d00a      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	2208      	movs	r2, #8
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	001a      	movs	r2, r3
 80016d6:	2301      	movs	r3, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	d010      	beq.n	80016fe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	09db      	lsrs	r3, r3, #7
 80016e0:	001a      	movs	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016e6:	d00a      	beq.n	80016fe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	2202      	movs	r2, #2
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2280      	movs	r2, #128	@ 0x80
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	220b      	movs	r2, #11
 8001708:	4013      	ands	r3, r2
 800170a:	d005      	beq.n	8001718 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0011      	movs	r1, r2
 8001712:	0018      	movs	r0, r3
 8001714:	f000 fc44 	bl	8001fa0 <I2C_ITError>
  }
}
 8001718:	46c0      	nop			@ (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b006      	add	sp, #24
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001728:	46c0      	nop			@ (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	0008      	movs	r0, r1
 800174a:	0011      	movs	r1, r2
 800174c:	1cfb      	adds	r3, r7, #3
 800174e:	1c02      	adds	r2, r0, #0
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	003b      	movs	r3, r7
 8001754:	1c0a      	adds	r2, r1, #0
 8001756:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2240      	movs	r2, #64	@ 0x40
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <I2C_Slave_ISR_IT+0x24>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0fb      	b.n	80019ac <I2C_Slave_ISR_IT+0x21c>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	@ 0x40
 80017b8:	2101      	movs	r1, #1
 80017ba:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	001a      	movs	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d00c      	beq.n	80017e2 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	001a      	movs	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017d2:	d006      	beq.n	80017e2 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0011      	movs	r1, r2
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f9f6 	bl	8001bcc <I2C_ITSlaveCplt>
 80017e0:	e0df      	b.n	80019a2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	001a      	movs	r2, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	d054      	beq.n	8001898 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	001a      	movs	r2, r3
 80017f4:	2301      	movs	r3, #1
 80017f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017f8:	d04e      	beq.n	8001898 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d12d      	bne.n	8001860 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2241      	movs	r2, #65	@ 0x41
 8001808:	5c9b      	ldrb	r3, [r3, r2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b28      	cmp	r3, #40	@ 0x28
 800180e:	d10b      	bne.n	8001828 <I2C_Slave_ISR_IT+0x98>
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	049b      	lsls	r3, r3, #18
 8001816:	429a      	cmp	r2, r3
 8001818:	d106      	bne.n	8001828 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 fb63 	bl	8001eec <I2C_ITListenCplt>
 8001826:	e036      	b.n	8001896 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2241      	movs	r2, #65	@ 0x41
 800182c:	5c9b      	ldrb	r3, [r3, r2]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b29      	cmp	r3, #41	@ 0x29
 8001832:	d110      	bne.n	8001856 <I2C_Slave_ISR_IT+0xc6>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	4a5f      	ldr	r2, [pc, #380]	@ (80019b4 <I2C_Slave_ISR_IT+0x224>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00c      	beq.n	8001856 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fcd5 	bl	80021f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	0018      	movs	r0, r3
 8001850:	f000 f956 	bl	8001b00 <I2C_ITSlaveSeqCplt>
 8001854:	e01f      	b.n	8001896 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2210      	movs	r2, #16
 800185c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800185e:	e09d      	b.n	800199c <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	2204      	movs	r2, #4
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <I2C_Slave_ISR_IT+0xf6>
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	045b      	lsls	r3, r3, #17
 8001880:	429a      	cmp	r2, r3
 8001882:	d000      	beq.n	8001886 <I2C_Slave_ISR_IT+0xf6>
 8001884:	e08a      	b.n	800199c <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fb86 	bl	8001fa0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001894:	e082      	b.n	800199c <I2C_Slave_ISR_IT+0x20c>
 8001896:	e081      	b.n	800199c <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	001a      	movs	r2, r3
 800189e:	2301      	movs	r3, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	d031      	beq.n	8001908 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	001a      	movs	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018ae:	d02b      	beq.n	8001908 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d018      	beq.n	80018ec <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d154      	bne.n	80019a0 <I2C_Slave_ISR_IT+0x210>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4a2e      	ldr	r2, [pc, #184]	@ (80019b4 <I2C_Slave_ISR_IT+0x224>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d050      	beq.n	80019a0 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 f8fd 	bl	8001b00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001906:	e04b      	b.n	80019a0 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	001a      	movs	r2, r3
 800190e:	2301      	movs	r3, #1
 8001910:	4013      	ands	r3, r2
 8001912:	d00c      	beq.n	800192e <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	001a      	movs	r2, r3
 800191a:	2301      	movs	r3, #1
 800191c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800191e:	d006      	beq.n	800192e <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f846 	bl	80019b8 <I2C_ITAddrCplt>
 800192c:	e039      	b.n	80019a2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	001a      	movs	r2, r3
 8001934:	2301      	movs	r3, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d033      	beq.n	80019a2 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	001a      	movs	r2, r3
 8001940:	2301      	movs	r3, #1
 8001942:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001944:	d02d      	beq.n	80019a2 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d018      	beq.n	8001982 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001980:	e00f      	b.n	80019a2 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	045b      	lsls	r3, r3, #17
 8001988:	429a      	cmp	r2, r3
 800198a:	d002      	beq.n	8001992 <I2C_Slave_ISR_IT+0x202>
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f8b3 	bl	8001b00 <I2C_ITSlaveSeqCplt>
 800199a:	e002      	b.n	80019a2 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	e000      	b.n	80019a2 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 80019a0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2240      	movs	r2, #64	@ 0x40
 80019a6:	2100      	movs	r1, #0
 80019a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b006      	add	sp, #24
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	ffff0000 	.word	0xffff0000

080019b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	@ 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	001a      	movs	r2, r3
 80019cc:	2328      	movs	r3, #40	@ 0x28
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b28      	cmp	r3, #40	@ 0x28
 80019d2:	d000      	beq.n	80019d6 <I2C_ITAddrCplt+0x1e>
 80019d4:	e088      	b.n	8001ae8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	250f      	movs	r5, #15
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	2101      	movs	r1, #1
 80019e6:	400a      	ands	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	200c      	movs	r0, #12
 80019f6:	183b      	adds	r3, r7, r0
 80019f8:	21fe      	movs	r1, #254	@ 0xfe
 80019fa:	400a      	ands	r2, r1
 80019fc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	240a      	movs	r4, #10
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	0592      	lsls	r2, r2, #22
 8001a0c:	0d92      	lsrs	r2, r2, #22
 8001a0e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2308      	movs	r3, #8
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	21fe      	movs	r1, #254	@ 0xfe
 8001a1e:	400a      	ands	r2, r1
 8001a20:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d148      	bne.n	8001abc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	09db      	lsrs	r3, r3, #7
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	4053      	eors	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2306      	movs	r3, #6
 8001a40:	4013      	ands	r3, r2
 8001a42:	d120      	bne.n	8001a86 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	187a      	adds	r2, r7, r1
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d14c      	bne.n	8001af8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	197b      	adds	r3, r7, r5
 8001a7a:	7819      	ldrb	r1, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fe5e 	bl	8001740 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a84:	e038      	b.n	8001af8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001a86:	240c      	movs	r4, #12
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	18ba      	adds	r2, r7, r2
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fe64 	bl	8002768 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2240      	movs	r2, #64	@ 0x40
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	881a      	ldrh	r2, [r3, #0]
 8001aac:	230f      	movs	r3, #15
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	7819      	ldrb	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fe43 	bl	8001740 <HAL_I2C_AddrCallback>
}
 8001aba:	e01d      	b.n	8001af8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	021a      	lsls	r2, r3, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 fe4f 	bl	8002768 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2240      	movs	r2, #64	@ 0x40
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	230f      	movs	r3, #15
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fe2d 	bl	8001740 <HAL_I2C_AddrCallback>
}
 8001ae6:	e007      	b.n	8001af8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2208      	movs	r2, #8
 8001aee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2240      	movs	r2, #64	@ 0x40
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]
}
 8001af8:	46c0      	nop			@ (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}

08001b00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2242      	movs	r2, #66	@ 0x42
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0b9b      	lsrs	r3, r3, #14
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d008      	beq.n	8001b36 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4925      	ldr	r1, [pc, #148]	@ (8001bc4 <I2C_ITSlaveSeqCplt+0xc4>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e00d      	b.n	8001b52 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0bdb      	lsrs	r3, r3, #15
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d007      	beq.n	8001b52 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	491e      	ldr	r1, [pc, #120]	@ (8001bc8 <I2C_ITSlaveSeqCplt+0xc8>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2241      	movs	r2, #65	@ 0x41
 8001b56:	5c9b      	ldrb	r3, [r3, r2]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b29      	cmp	r3, #41	@ 0x29
 8001b5c:	d114      	bne.n	8001b88 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2241      	movs	r2, #65	@ 0x41
 8001b62:	2128      	movs	r1, #40	@ 0x28
 8001b64:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2221      	movs	r2, #33	@ 0x21
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fdf9 	bl	8002768 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2240      	movs	r2, #64	@ 0x40
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fdcd 	bl	8001720 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b86:	e019      	b.n	8001bbc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2241      	movs	r2, #65	@ 0x41
 8001b8c:	5c9b      	ldrb	r3, [r3, r2]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b92:	d113      	bne.n	8001bbc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2241      	movs	r2, #65	@ 0x41
 8001b98:	2128      	movs	r1, #40	@ 0x28
 8001b9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2222      	movs	r2, #34	@ 0x22
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 fdde 	bl	8002768 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	@ 0x40
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fdba 	bl	8001730 <HAL_I2C_SlaveRxCpltCallback>
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b004      	add	sp, #16
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	ffffbfff 	.word	0xffffbfff
 8001bc8:	ffff7fff 	.word	0xffff7fff

08001bcc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001be8:	200b      	movs	r0, #11
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	2141      	movs	r1, #65	@ 0x41
 8001bf0:	5c52      	ldrb	r2, [r2, r1]
 8001bf2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bfc:	183b      	adds	r3, r7, r0
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b21      	cmp	r3, #33	@ 0x21
 8001c02:	d003      	beq.n	8001c0c <I2C_ITSlaveCplt+0x40>
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b29      	cmp	r3, #41	@ 0x29
 8001c0a:	d109      	bne.n	8001c20 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c0c:	4ab0      	ldr	r2, [pc, #704]	@ (8001ed0 <I2C_ITSlaveCplt+0x304>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0011      	movs	r1, r2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fda8 	bl	8002768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2221      	movs	r2, #33	@ 0x21
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c1e:	e020      	b.n	8001c62 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c20:	220b      	movs	r2, #11
 8001c22:	18bb      	adds	r3, r7, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b22      	cmp	r3, #34	@ 0x22
 8001c28:	d003      	beq.n	8001c32 <I2C_ITSlaveCplt+0x66>
 8001c2a:	18bb      	adds	r3, r7, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c30:	d109      	bne.n	8001c46 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c32:	4aa8      	ldr	r2, [pc, #672]	@ (8001ed4 <I2C_ITSlaveCplt+0x308>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 fd95 	bl	8002768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2222      	movs	r2, #34	@ 0x22
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c44:	e00d      	b.n	8001c62 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001c46:	230b      	movs	r3, #11
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b28      	cmp	r3, #40	@ 0x28
 8001c4e:	d108      	bne.n	8001c62 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001c50:	4aa1      	ldr	r2, [pc, #644]	@ (8001ed8 <I2C_ITSlaveCplt+0x30c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0011      	movs	r1, r2
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fd86 	bl	8002768 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	0209      	lsls	r1, r1, #8
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4997      	ldr	r1, [pc, #604]	@ (8001edc <I2C_ITSlaveCplt+0x310>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 fab5 	bl	80021f6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	0b9b      	lsrs	r3, r3, #14
 8001c90:	001a      	movs	r2, r3
 8001c92:	2301      	movs	r3, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	498f      	ldr	r1, [pc, #572]	@ (8001ee0 <I2C_ITSlaveCplt+0x314>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cbe:	e018      	b.n	8001cf2 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	0bdb      	lsrs	r3, r3, #15
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d012      	beq.n	8001cf2 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4983      	ldr	r1, [pc, #524]	@ (8001ee4 <I2C_ITSlaveCplt+0x318>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d020      	beq.n	8001d40 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2204      	movs	r2, #4
 8001d02:	4393      	bics	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	2204      	movs	r2, #4
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d051      	beq.n	8001e06 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	001a      	movs	r2, r3
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d6c:	d04b      	beq.n	8001e06 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d12d      	bne.n	8001dd4 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2241      	movs	r2, #65	@ 0x41
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b28      	cmp	r3, #40	@ 0x28
 8001d82:	d10b      	bne.n	8001d9c <I2C_ITSlaveCplt+0x1d0>
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	049b      	lsls	r3, r3, #18
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0011      	movs	r1, r2
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 f8a9 	bl	8001eec <I2C_ITListenCplt>
 8001d9a:	e034      	b.n	8001e06 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2241      	movs	r2, #65	@ 0x41
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b29      	cmp	r3, #41	@ 0x29
 8001da6:	d110      	bne.n	8001dca <I2C_ITSlaveCplt+0x1fe>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee8 <I2C_ITSlaveCplt+0x31c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00c      	beq.n	8001dca <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2210      	movs	r2, #16
 8001db6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fa1b 	bl	80021f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fe9c 	bl	8001b00 <I2C_ITSlaveSeqCplt>
 8001dc8:	e01d      	b.n	8001e06 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	61da      	str	r2, [r3, #28]
 8001dd2:	e018      	b.n	8001e06 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	2204      	movs	r2, #4
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <I2C_ITSlaveCplt+0x22c>
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	045b      	lsls	r3, r3, #17
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d106      	bne.n	8001e06 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f8cd 	bl	8001fa0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2242      	movs	r2, #66	@ 0x42
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	0011      	movs	r1, r2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f8bb 	bl	8001fa0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2241      	movs	r2, #65	@ 0x41
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b28      	cmp	r3, #40	@ 0x28
 8001e34:	d147      	bne.n	8001ec6 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f855 	bl	8001eec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e42:	e040      	b.n	8001ec6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e48:	4a27      	ldr	r2, [pc, #156]	@ (8001ee8 <I2C_ITSlaveCplt+0x31c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d016      	beq.n	8001e7c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fe55 	bl	8001b00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <I2C_ITSlaveCplt+0x31c>)
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	@ 0x41
 8001e60:	2120      	movs	r1, #32
 8001e62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	@ 0x40
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff fc73 	bl	8001760 <HAL_I2C_ListenCpltCallback>
}
 8001e7a:	e024      	b.n	8001ec6 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2241      	movs	r2, #65	@ 0x41
 8001e80:	5c9b      	ldrb	r3, [r3, r2]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b22      	cmp	r3, #34	@ 0x22
 8001e86:	d10f      	bne.n	8001ea8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2241      	movs	r2, #65	@ 0x41
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2240      	movs	r2, #64	@ 0x40
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff fc45 	bl	8001730 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ea6:	e00e      	b.n	8001ec6 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2241      	movs	r2, #65	@ 0x41
 8001eac:	2120      	movs	r1, #32
 8001eae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2240      	movs	r2, #64	@ 0x40
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff fc2d 	bl	8001720 <HAL_I2C_SlaveTxCpltCallback>
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	00008001 	.word	0x00008001
 8001ed4:	00008002 	.word	0x00008002
 8001ed8:	00008003 	.word	0x00008003
 8001edc:	fe00e800 	.word	0xfe00e800
 8001ee0:	ffffbfff 	.word	0xffffbfff
 8001ee4:	ffff7fff 	.word	0xffff7fff
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <I2C_ITListenCplt+0xac>)
 8001efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	@ 0x41
 8001f06:	2120      	movs	r1, #32
 8001f08:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2242      	movs	r2, #66	@ 0x42
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	d022      	beq.n	8001f6a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	2204      	movs	r2, #4
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <I2C_ITListenCplt+0xb0>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0011      	movs	r1, r2
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fbf9 	bl	8002768 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2240      	movs	r2, #64	@ 0x40
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fbe9 	bl	8001760 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	00008003 	.word	0x00008003

08001fa0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001faa:	200f      	movs	r0, #15
 8001fac:	183b      	adds	r3, r7, r0
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	2141      	movs	r1, #65	@ 0x41
 8001fb2:	5c52      	ldrb	r2, [r2, r1]
 8001fb4:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2242      	movs	r2, #66	@ 0x42
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a72      	ldr	r2, [pc, #456]	@ (800218c <I2C_ITError+0x1ec>)
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b28      	cmp	r3, #40	@ 0x28
 8001fdc:	d007      	beq.n	8001fee <I2C_ITError+0x4e>
 8001fde:	183b      	adds	r3, r7, r0
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b29      	cmp	r3, #41	@ 0x29
 8001fe4:	d003      	beq.n	8001fee <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fec:	d10c      	bne.n	8002008 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fbb8 	bl	8002768 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2241      	movs	r2, #65	@ 0x41
 8001ffc:	2128      	movs	r1, #40	@ 0x28
 8001ffe:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <I2C_ITError+0x1f0>)
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
 8002006:	e032      	b.n	800206e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002008:	4a62      	ldr	r2, [pc, #392]	@ (8002194 <I2C_ITError+0x1f4>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fbaa 	bl	8002768 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 f8ed 	bl	80021f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2241      	movs	r2, #65	@ 0x41
 8002020:	5c9b      	ldrb	r3, [r3, r2]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b60      	cmp	r3, #96	@ 0x60
 8002026:	d01f      	beq.n	8002068 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2241      	movs	r2, #65	@ 0x41
 800202c:	2120      	movs	r1, #32
 800202e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2220      	movs	r2, #32
 8002038:	4013      	ands	r3, r2
 800203a:	2b20      	cmp	r3, #32
 800203c:	d114      	bne.n	8002068 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2210      	movs	r2, #16
 8002046:	4013      	ands	r3, r2
 8002048:	2b10      	cmp	r3, #16
 800204a:	d109      	bne.n	8002060 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	2204      	movs	r2, #4
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2220      	movs	r2, #32
 8002066:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03b      	beq.n	80020f4 <I2C_ITError+0x154>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b11      	cmp	r3, #17
 8002080:	d002      	beq.n	8002088 <I2C_ITError+0xe8>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b21      	cmp	r3, #33	@ 0x21
 8002086:	d135      	bne.n	80020f4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	01db      	lsls	r3, r3, #7
 8002092:	401a      	ands	r2, r3
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	01db      	lsls	r3, r3, #7
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	493c      	ldr	r1, [pc, #240]	@ (8002198 <I2C_ITError+0x1f8>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7fe fde3 	bl	8000c7c <HAL_DMA_GetState>
 80020b6:	0003      	movs	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d016      	beq.n	80020ea <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	4a36      	ldr	r2, [pc, #216]	@ (800219c <I2C_ITError+0x1fc>)
 80020c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fd59 	bl	8000b88 <HAL_DMA_Abort_IT>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d051      	beq.n	800217e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e4:	0018      	movs	r0, r3
 80020e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020e8:	e049      	b.n	800217e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 f859 	bl	80021a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020f2:	e044      	b.n	800217e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03b      	beq.n	8002174 <I2C_ITError+0x1d4>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d002      	beq.n	8002108 <I2C_ITError+0x168>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b22      	cmp	r3, #34	@ 0x22
 8002106:	d135      	bne.n	8002174 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	401a      	ands	r2, r3
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	491e      	ldr	r1, [pc, #120]	@ (80021a0 <I2C_ITError+0x200>)
 8002128:	400a      	ands	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fda3 	bl	8000c7c <HAL_DMA_GetState>
 8002136:	0003      	movs	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d016      	beq.n	800216a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	4a16      	ldr	r2, [pc, #88]	@ (800219c <I2C_ITError+0x1fc>)
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	0018      	movs	r0, r3
 8002152:	f7fe fd19 	bl	8000b88 <HAL_DMA_Abort_IT>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d013      	beq.n	8002182 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002164:	0018      	movs	r0, r3
 8002166:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002168:	e00b      	b.n	8002182 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f819 	bl	80021a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002172:	e006      	b.n	8002182 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f814 	bl	80021a4 <I2C_TreatErrorCallback>
  }
}
 800217c:	e002      	b.n	8002184 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	e000      	b.n	8002184 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002182:	46c0      	nop			@ (mov r8, r8)
}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	ffff0000 	.word	0xffff0000
 8002190:	08001791 	.word	0x08001791
 8002194:	00008003 	.word	0x00008003
 8002198:	ffffbfff 	.word	0xffffbfff
 800219c:	0800223b 	.word	0x0800223b
 80021a0:	ffff7fff 	.word	0xffff7fff

080021a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	@ 0x41
 80021b0:	5c9b      	ldrb	r3, [r3, r2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b60      	cmp	r3, #96	@ 0x60
 80021b6:	d10f      	bne.n	80021d8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2241      	movs	r2, #65	@ 0x41
 80021bc:	2120      	movs	r1, #32
 80021be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2240      	movs	r2, #64	@ 0x40
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fad5 	bl	8001780 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021d6:	e00a      	b.n	80021ee <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2240      	movs	r2, #64	@ 0x40
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fac1 	bl	8001770 <HAL_I2C_ErrorCallback>
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d103      	bne.n	8002214 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2201      	movs	r2, #1
 800221c:	4013      	ands	r3, r2
 800221e:	2b01      	cmp	r3, #1
 8002220:	d007      	beq.n	8002232 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	619a      	str	r2, [r3, #24]
  }
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}

0800223a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002254:	2200      	movs	r2, #0
 8002256:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	2200      	movs	r2, #0
 8002266:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff ff9a 	bl	80021a4 <I2C_TreatErrorCallback>
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e03a      	b.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0018      	movs	r0, r3
 8002292:	f000 f971 	bl	8002578 <I2C_IsErrorOccurred>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e040      	b.n	8002320 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	d02d      	beq.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7fe fb3a 	bl	800091c <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d302      	bcc.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d122      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	425a      	negs	r2, r3
 80022ca:	4153      	adcs	r3, r2
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	001a      	movs	r2, r3
 80022d0:	1dfb      	adds	r3, r7, #7
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d113      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	2220      	movs	r2, #32
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2241      	movs	r2, #65	@ 0x41
 80022e8:	2120      	movs	r1, #32
 80022ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2242      	movs	r2, #66	@ 0x42
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e00f      	b.n	8002320 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	425a      	negs	r2, r3
 8002310:	4153      	adcs	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	001a      	movs	r2, r3
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d0b5      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002334:	e032      	b.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f91b 	bl	8002578 <I2C_IsErrorOccurred>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e030      	b.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	d025      	beq.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002350:	f7fe fae4 	bl	800091c <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d302      	bcc.n	8002366 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11a      	bne.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d013      	beq.n	800239c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	2220      	movs	r2, #32
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2241      	movs	r2, #65	@ 0x41
 8002384:	2120      	movs	r1, #32
 8002386:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2242      	movs	r2, #66	@ 0x42
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d1c5      	bne.n	8002336 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c0:	e02f      	b.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 f8d5 	bl	8002578 <I2C_IsErrorOccurred>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e02d      	b.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe faa1 	bl	800091c <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11a      	bne.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2220      	movs	r2, #32
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d013      	beq.n	8002422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	2220      	movs	r2, #32
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2241      	movs	r2, #65	@ 0x41
 800240a:	2120      	movs	r1, #32
 800240c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2242      	movs	r2, #66	@ 0x42
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2240      	movs	r2, #64	@ 0x40
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2220      	movs	r2, #32
 800242a:	4013      	ands	r3, r2
 800242c:	2b20      	cmp	r3, #32
 800242e:	d1c8      	bne.n	80023c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2317      	movs	r3, #23
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002450:	e07b      	b.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 f88d 	bl	8002578 <I2C_IsErrorOccurred>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d003      	beq.n	800246a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002462:	2317      	movs	r3, #23
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2220      	movs	r2, #32
 8002472:	4013      	ands	r3, r2
 8002474:	2b20      	cmp	r3, #32
 8002476:	d140      	bne.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002478:	2117      	movs	r1, #23
 800247a:	187b      	adds	r3, r7, r1
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13b      	bne.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	2b04      	cmp	r3, #4
 800248e:	d106      	bne.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2210      	movs	r2, #16
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d123      	bne.n	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2210      	movs	r2, #16
 80024b2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2204      	movs	r2, #4
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2220      	movs	r2, #32
 80024c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4929      	ldr	r1, [pc, #164]	@ (8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2241      	movs	r2, #65	@ 0x41
 80024d6:	2120      	movs	r1, #32
 80024d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2242      	movs	r2, #66	@ 0x42
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2240      	movs	r2, #64	@ 0x40
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80024ea:	2317      	movs	r3, #23
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e002      	b.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80024fa:	f7fe fa0f 	bl	800091c <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11c      	bne.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002510:	2017      	movs	r0, #23
 8002512:	183b      	adds	r3, r7, r0
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d117      	bne.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2204      	movs	r2, #4
 8002522:	4013      	ands	r3, r2
 8002524:	2b04      	cmp	r3, #4
 8002526:	d010      	beq.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252c:	2220      	movs	r2, #32
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2241      	movs	r2, #65	@ 0x41
 8002538:	2120      	movs	r1, #32
 800253a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	2100      	movs	r1, #0
 8002542:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002544:	183b      	adds	r3, r7, r0
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2204      	movs	r2, #4
 8002552:	4013      	ands	r3, r2
 8002554:	2b04      	cmp	r3, #4
 8002556:	d005      	beq.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002562:	e776      	b.n	8002452 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002564:	2317      	movs	r3, #23
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b006      	add	sp, #24
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	fe00e800 	.word	0xfe00e800

08002578 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	@ 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2327      	movs	r3, #39	@ 0x27
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2210      	movs	r2, #16
 80025a0:	4013      	ands	r3, r2
 80025a2:	d100      	bne.n	80025a6 <I2C_IsErrorOccurred+0x2e>
 80025a4:	e079      	b.n	800269a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ae:	e057      	b.n	8002660 <I2C_IsErrorOccurred+0xe8>
 80025b0:	2227      	movs	r2, #39	@ 0x27
 80025b2:	18bb      	adds	r3, r7, r2
 80025b4:	18ba      	adds	r2, r7, r2
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3301      	adds	r3, #1
 80025be:	d04f      	beq.n	8002660 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7fe f9ac 	bl	800091c <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <I2C_IsErrorOccurred+0x5e>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d144      	bne.n	8002660 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025e4:	2013      	movs	r0, #19
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	2142      	movs	r1, #66	@ 0x42
 80025ec:	5c52      	ldrb	r2, [r2, r1]
 80025ee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	401a      	ands	r2, r3
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	429a      	cmp	r2, r3
 8002602:	d126      	bne.n	8002652 <I2C_IsErrorOccurred+0xda>
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	01db      	lsls	r3, r3, #7
 800260a:	429a      	cmp	r2, r3
 800260c:	d021      	beq.n	8002652 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b20      	cmp	r3, #32
 8002614:	d01d      	beq.n	8002652 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	01c9      	lsls	r1, r1, #7
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002628:	f7fe f978 	bl	800091c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002630:	e00f      	b.n	8002652 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002632:	f7fe f973 	bl	800091c <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b19      	cmp	r3, #25
 800263e:	d908      	bls.n	8002652 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2220      	movs	r2, #32
 8002644:	4313      	orrs	r3, r2
 8002646:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002648:	2327      	movs	r3, #39	@ 0x27
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

              break;
 8002650:	e006      	b.n	8002660 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2220      	movs	r2, #32
 800265a:	4013      	ands	r3, r2
 800265c:	2b20      	cmp	r3, #32
 800265e:	d1e8      	bne.n	8002632 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	2b20      	cmp	r3, #32
 800266c:	d004      	beq.n	8002678 <I2C_IsErrorOccurred+0x100>
 800266e:	2327      	movs	r3, #39	@ 0x27
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d09b      	beq.n	80025b0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002678:	2327      	movs	r3, #39	@ 0x27
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2204      	movs	r2, #4
 800268e:	4313      	orrs	r3, r2
 8002690:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002692:	2327      	movs	r3, #39	@ 0x27
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d00c      	beq.n	80026c6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4313      	orrs	r3, r2
 80026b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	0052      	lsls	r2, r2, #1
 80026bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026be:	2327      	movs	r3, #39	@ 0x27
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4013      	ands	r3, r2
 80026ce:	d00c      	beq.n	80026ea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	2208      	movs	r2, #8
 80026d4:	4313      	orrs	r3, r2
 80026d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	00d2      	lsls	r2, r2, #3
 80026e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026e2:	2327      	movs	r3, #39	@ 0x27
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d00c      	beq.n	800270e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2202      	movs	r2, #2
 80026f8:	4313      	orrs	r3, r2
 80026fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2280      	movs	r2, #128	@ 0x80
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002706:	2327      	movs	r3, #39	@ 0x27
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800270e:	2327      	movs	r3, #39	@ 0x27
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01d      	beq.n	8002754 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff fd6b 	bl	80021f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	490e      	ldr	r1, [pc, #56]	@ (8002764 <I2C_IsErrorOccurred+0x1ec>)
 800272c:	400a      	ands	r2, r1
 800272e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2241      	movs	r2, #65	@ 0x41
 8002740:	2120      	movs	r1, #32
 8002742:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2242      	movs	r2, #66	@ 0x42
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	@ 0x40
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002754:	2327      	movs	r3, #39	@ 0x27
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b00a      	add	sp, #40	@ 0x28
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	fe00e800 	.word	0xfe00e800

08002768 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	000a      	movs	r2, r1
 8002772:	1cbb      	adds	r3, r7, #2
 8002774:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800277a:	1cbb      	adds	r3, r7, #2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	d010      	beq.n	80027a6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2242      	movs	r2, #66	@ 0x42
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2241      	movs	r2, #65	@ 0x41
 8002790:	5c9b      	ldrb	r3, [r3, r2]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	001a      	movs	r2, r3
 8002796:	2328      	movs	r3, #40	@ 0x28
 8002798:	4013      	ands	r3, r2
 800279a:	2b28      	cmp	r3, #40	@ 0x28
 800279c:	d003      	beq.n	80027a6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	22b0      	movs	r2, #176	@ 0xb0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027a6:	1cbb      	adds	r3, r7, #2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d010      	beq.n	80027d2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2244      	movs	r2, #68	@ 0x44
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2241      	movs	r2, #65	@ 0x41
 80027bc:	5c9b      	ldrb	r3, [r3, r2]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	001a      	movs	r2, r3
 80027c2:	2328      	movs	r3, #40	@ 0x28
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b28      	cmp	r3, #40	@ 0x28
 80027c8:	d003      	beq.n	80027d2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22b0      	movs	r2, #176	@ 0xb0
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027d2:	1cbb      	adds	r3, r7, #2
 80027d4:	2200      	movs	r2, #0
 80027d6:	5e9b      	ldrsh	r3, [r3, r2]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da03      	bge.n	80027e4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	22b8      	movs	r2, #184	@ 0xb8
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027e4:	1cbb      	adds	r3, r7, #2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d103      	bne.n	80027f4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2290      	movs	r2, #144	@ 0x90
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027f4:	1cbb      	adds	r3, r7, #2
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d103      	bne.n	8002804 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d103      	bne.n	8002814 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	@ 0x40
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43d9      	mvns	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	400a      	ands	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2241      	movs	r2, #65	@ 0x41
 800283e:	5c9b      	ldrb	r3, [r3, r2]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b20      	cmp	r3, #32
 8002844:	d138      	bne.n	80028b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2240      	movs	r2, #64	@ 0x40
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002850:	2302      	movs	r3, #2
 8002852:	e032      	b.n	80028ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	@ 0x40
 8002858:	2101      	movs	r1, #1
 800285a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2241      	movs	r2, #65	@ 0x41
 8002860:	2124      	movs	r1, #36	@ 0x24
 8002862:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4911      	ldr	r1, [pc, #68]	@ (80028c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002880:	400a      	ands	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2241      	movs	r2, #65	@ 0x41
 80028a8:	2120      	movs	r1, #32
 80028aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	ffffefff 	.word	0xffffefff

080028c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2241      	movs	r2, #65	@ 0x41
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d139      	bne.n	8002952 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e033      	b.n	8002954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	2101      	movs	r1, #1
 80028f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2241      	movs	r2, #65	@ 0x41
 80028f8:	2124      	movs	r1, #36	@ 0x24
 80028fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	438a      	bics	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a11      	ldr	r2, [pc, #68]	@ (800295c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2241      	movs	r2, #65	@ 0x41
 8002942:	2120      	movs	r1, #32
 8002944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2240      	movs	r2, #64	@ 0x40
 800294a:	2100      	movs	r1, #0
 800294c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}
 800295c:	fffff0ff 	.word	0xfffff0ff

08002960 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1d0      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_RCC_OscConfig+0x1e>
 800297c:	e069      	b.n	8002a52 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4bc8      	ldr	r3, [pc, #800]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2238      	movs	r2, #56	@ 0x38
 8002984:	4013      	ands	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d15d      	bne.n	8002a52 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1bc      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	025b      	lsls	r3, r3, #9
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_OscConfig+0x56>
 80029a6:	4bbe      	ldr	r3, [pc, #760]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4bbd      	ldr	r3, [pc, #756]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029ac:	2180      	movs	r1, #128	@ 0x80
 80029ae:	0249      	lsls	r1, r1, #9
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e020      	b.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	23a0      	movs	r3, #160	@ 0xa0
 80029bc:	02db      	lsls	r3, r3, #11
 80029be:	429a      	cmp	r2, r3
 80029c0:	d10e      	bne.n	80029e0 <HAL_RCC_OscConfig+0x80>
 80029c2:	4bb7      	ldr	r3, [pc, #732]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4bb6      	ldr	r3, [pc, #728]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029c8:	2180      	movs	r1, #128	@ 0x80
 80029ca:	02c9      	lsls	r1, r1, #11
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4bb3      	ldr	r3, [pc, #716]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4bb2      	ldr	r3, [pc, #712]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029d6:	2180      	movs	r1, #128	@ 0x80
 80029d8:	0249      	lsls	r1, r1, #9
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029e0:	4baf      	ldr	r3, [pc, #700]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4bae      	ldr	r3, [pc, #696]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029e6:	49af      	ldr	r1, [pc, #700]	@ (8002ca4 <HAL_RCC_OscConfig+0x344>)
 80029e8:	400a      	ands	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	4bac      	ldr	r3, [pc, #688]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4bab      	ldr	r3, [pc, #684]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 80029f2:	49ad      	ldr	r1, [pc, #692]	@ (8002ca8 <HAL_RCC_OscConfig+0x348>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d014      	beq.n	8002a2a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fd ff8c 	bl	800091c <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002a0a:	f7fd ff87 	bl	800091c <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	@ 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e17b      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	@ 0x80
 8002a22:	029b      	lsls	r3, r3, #10
 8002a24:	4013      	ands	r3, r2
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0xaa>
 8002a28:	e013      	b.n	8002a52 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fd ff77 	bl	800091c <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002a34:	f7fd ff72 	bl	800091c <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e166      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a46:	4b96      	ldr	r3, [pc, #600]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	029b      	lsls	r3, r3, #10
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCC_OscConfig+0xfe>
 8002a5c:	e086      	b.n	8002b6c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	4b90      	ldr	r3, [pc, #576]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2238      	movs	r2, #56	@ 0x38
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d12f      	bne.n	8002ace <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e14c      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b89      	ldr	r3, [pc, #548]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a8b      	ldr	r2, [pc, #556]	@ (8002cac <HAL_RCC_OscConfig+0x34c>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	021a      	lsls	r2, r3, #8
 8002a8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a96:	4b82      	ldr	r3, [pc, #520]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a85      	ldr	r2, [pc, #532]	@ (8002cb0 <HAL_RCC_OscConfig+0x350>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0adb      	lsrs	r3, r3, #11
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cb4 <HAL_RCC_OscConfig+0x354>)
 8002ab6:	40da      	lsrs	r2, r3
 8002ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb8 <HAL_RCC_OscConfig+0x358>)
 8002aba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002abc:	4b7f      	ldr	r3, [pc, #508]	@ (8002cbc <HAL_RCC_OscConfig+0x35c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fd fecf 	bl	8000864 <HAL_InitTick>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d050      	beq.n	8002b6c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e122      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d030      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ad6:	4b72      	ldr	r3, [pc, #456]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	@ (8002cb0 <HAL_RCC_OscConfig+0x350>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002af0:	2180      	movs	r1, #128	@ 0x80
 8002af2:	0049      	lsls	r1, r1, #1
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fd ff10 	bl	800091c <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b02:	f7fd ff0b 	bl	800091c <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0ff      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b14:	4b62      	ldr	r3, [pc, #392]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a61      	ldr	r2, [pc, #388]	@ (8002cac <HAL_RCC_OscConfig+0x34c>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e019      	b.n	8002b6c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002b38:	4b59      	ldr	r3, [pc, #356]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b3e:	4960      	ldr	r1, [pc, #384]	@ (8002cc0 <HAL_RCC_OscConfig+0x360>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fd feea 	bl	800091c <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b4e:	f7fd fee5 	bl	800091c <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0d9      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	d042      	beq.n	8002bfc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002b76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2238      	movs	r2, #56	@ 0x38
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b18      	cmp	r3, #24
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d138      	bne.n	8002bfc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0c2      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b96:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fd febb 	bl	800091c <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002bac:	f7fd feb6 	bl	800091c <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0aa      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002bbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0f1      	beq.n	8002bac <HAL_RCC_OscConfig+0x24c>
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002bca:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002bcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	438a      	bics	r2, r1
 8002bd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fd fea1 	bl	800091c <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002be0:	f7fd fe9c 	bl	800091c <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e090      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d1f1      	bne.n	8002be0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	d100      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2a8>
 8002c06:	e084      	b.n	8002d12 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2238      	movs	r2, #56	@ 0x38
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d000      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2c6>
 8002c24:	e075      	b.n	8002d12 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e074      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2e0>
 8002c32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x31a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x302>
 8002c48:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c4e:	2104      	movs	r1, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x31a>
 8002c62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_OscConfig+0x340>)
 8002c74:	2104      	movs	r1, #4
 8002c76:	438a      	bics	r2, r1
 8002c78:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fd fe4b 	bl	800091c <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fd fe46 	bl	800091c <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc4 <HAL_RCC_OscConfig+0x364>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d915      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e039      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	fffeffff 	.word	0xfffeffff
 8002ca8:	fffbffff 	.word	0xfffbffff
 8002cac:	ffff80ff 	.word	0xffff80ff
 8002cb0:	ffffc7ff 	.word	0xffffc7ff
 8002cb4:	02dc6c00 	.word	0x02dc6c00
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	fffffeff 	.word	0xfffffeff
 8002cc4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_RCC_OscConfig+0x3bc>)
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0dc      	beq.n	8002c8c <HAL_RCC_OscConfig+0x32c>
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fd fe22 	bl	800091c <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002cdc:	e009      	b.n	8002cf2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fd fe1d 	bl	800091c <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <HAL_RCC_OscConfig+0x3c0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e010      	b.n	8002d14 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCC_OscConfig+0x3bc>)
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d105      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_OscConfig+0x3bc>)
 8002d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <HAL_RCC_OscConfig+0x3bc>)
 8002d0c:	4905      	ldr	r1, [pc, #20]	@ (8002d24 <HAL_RCC_OscConfig+0x3c4>)
 8002d0e:	400a      	ands	r2, r1
 8002d10:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00001388 	.word	0x00001388
 8002d24:	efffffff 	.word	0xefffffff

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0df      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b71      	ldr	r3, [pc, #452]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2207      	movs	r2, #7
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d91e      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	4b6b      	ldr	r3, [pc, #428]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d5c:	f7fd fdde 	bl	800091c <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7fd fdd9 	bl	800091c <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4a65      	ldr	r2, [pc, #404]	@ (8002f08 <HAL_RCC_ClockConfig+0x1e0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0c0      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d7a:	4b62      	ldr	r3, [pc, #392]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2207      	movs	r2, #7
 8002d80:	4013      	ands	r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d017      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2204      	movs	r2, #4
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a5b      	ldr	r2, [pc, #364]	@ (8002f10 <HAL_RCC_ClockConfig+0x1e8>)
 8002da2:	401a      	ands	r2, r3
 8002da4:	4b59      	ldr	r3, [pc, #356]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002da6:	21b0      	movs	r1, #176	@ 0xb0
 8002da8:	0109      	lsls	r1, r1, #4
 8002daa:	430a      	orrs	r2, r1
 8002dac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dae:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a58      	ldr	r2, [pc, #352]	@ (8002f14 <HAL_RCC_ClockConfig+0x1ec>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d04b      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d11f      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e08b      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dec:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	d113      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e07f      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e04:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e074      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002e12:	4b3e      	ldr	r3, [pc, #248]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e06d      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e20:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2207      	movs	r2, #7
 8002e26:	4393      	bics	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4b37      	ldr	r3, [pc, #220]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fd fd72 	bl	800091c <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	e009      	b.n	8002e52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3e:	f7fd fd6d 	bl	800091c <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	4a2f      	ldr	r2, [pc, #188]	@ (8002f08 <HAL_RCC_ClockConfig+0x1e0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e054      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2e      	ldr	r3, [pc, #184]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2238      	movs	r2, #56	@ 0x38
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1ec      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2207      	movs	r2, #7
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d21e      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2207      	movs	r2, #7
 8002e78:	4393      	bics	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e84:	f7fd fd4a 	bl	800091c <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7fd fd45 	bl	800091c <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_RCC_ClockConfig+0x1e0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e02c      	b.n	8002efc <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ea2:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_RCC_ClockConfig+0x1dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eba:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ece:	f000 f82b 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ed2:	0001      	movs	r1, r0
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <HAL_RCC_ClockConfig+0x1e4>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	220f      	movs	r2, #15
 8002edc:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ede:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f4>)
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ee8:	000a      	movs	r2, r1
 8002eea:	40da      	lsrs	r2, r3
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <HAL_RCC_ClockConfig+0x1fc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd fcb5 	bl	8000864 <HAL_InitTick>
 8002efa:	0003      	movs	r3, r0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40022000 	.word	0x40022000
 8002f08:	00001388 	.word	0x00001388
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	ffff84ff 	.word	0xffff84ff
 8002f14:	fffff0ff 	.word	0xfffff0ff
 8002f18:	ffff8fff 	.word	0xffff8fff
 8002f1c:	080031f4 	.word	0x080031f4
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2238      	movs	r2, #56	@ 0x38
 8002f34:	4013      	ands	r3, r2
 8002f36:	d10f      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0adb      	lsrs	r3, r3, #11
 8002f3e:	2207      	movs	r2, #7
 8002f40:	4013      	ands	r3, r2
 8002f42:	2201      	movs	r2, #1
 8002f44:	409a      	lsls	r2, r3
 8002f46:	0013      	movs	r3, r2
 8002f48:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	4815      	ldr	r0, [pc, #84]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f4e:	f7fd f8db 	bl	8000108 <__udivsi3>
 8002f52:	0003      	movs	r3, r0
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	e01e      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2238      	movs	r2, #56	@ 0x38
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x80>)
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2238      	movs	r2, #56	@ 0x38
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d103      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2238      	movs	r2, #56	@ 0x38
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b18      	cmp	r3, #24
 8002f88:	d103      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f8a:	23fa      	movs	r3, #250	@ 0xfa
 8002f8c:	01db      	lsls	r3, r3, #7
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	e001      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002f96:	687b      	ldr	r3, [r7, #4]
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	02dc6c00 	.word	0x02dc6c00
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fb4:	2313      	movs	r3, #19
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fbc:	2312      	movs	r3, #18
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2240      	movs	r2, #64	@ 0x40
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002fce:	e079      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2011      	movs	r0, #17
 8002fd2:	183b      	adds	r3, r7, r0
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b63      	ldr	r3, [pc, #396]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	055b      	lsls	r3, r3, #21
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d110      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b60      	ldr	r3, [pc, #384]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	0549      	lsls	r1, r1, #21
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	055b      	lsls	r3, r3, #21
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003000:	183b      	adds	r3, r7, r0
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003006:	4b58      	ldr	r3, [pc, #352]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800300a:	23c0      	movs	r3, #192	@ 0xc0
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4013      	ands	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d019      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	429a      	cmp	r2, r3
 8003020:	d014      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003022:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	4a51      	ldr	r2, [pc, #324]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302c:	4b4e      	ldr	r3, [pc, #312]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800302e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003030:	4b4d      	ldr	r3, [pc, #308]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0249      	lsls	r1, r1, #9
 8003036:	430a      	orrs	r2, r1
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b4b      	ldr	r3, [pc, #300]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800303c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003040:	494b      	ldr	r1, [pc, #300]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003042:	400a      	ands	r2, r1
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003046:	4b48      	ldr	r3, [pc, #288]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2201      	movs	r2, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d016      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fd fc62 	bl	800091c <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800305c:	e00c      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fd fc5d 	bl	800091c <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	4a42      	ldr	r2, [pc, #264]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d904      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800306e:	2313      	movs	r3, #19
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2203      	movs	r2, #3
 8003074:	701a      	strb	r2, [r3, #0]
          break;
 8003076:	e004      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003078:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	2202      	movs	r2, #2
 800307e:	4013      	ands	r3, r2
 8003080:	d0ed      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003082:	2313      	movs	r3, #19
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308c:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	4a36      	ldr	r2, [pc, #216]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800309c:	430a      	orrs	r2, r1
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030a0:	e005      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	2312      	movs	r3, #18
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2213      	movs	r2, #19
 80030a8:	18ba      	adds	r2, r7, r2
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ae:	2311      	movs	r3, #17
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030be:	492e      	ldr	r1, [pc, #184]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ce:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	2203      	movs	r2, #3
 80030d4:	4393      	bics	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	4a22      	ldr	r2, [pc, #136]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2220      	movs	r2, #32
 8003106:	4013      	ands	r3, r2
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	0899      	lsrs	r1, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003118:	430a      	orrs	r2, r1
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	4013      	ands	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003136:	430a      	orrs	r2, r1
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	22e0      	movs	r2, #224	@ 0xe0
 800314a:	4393      	bics	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003158:	2312      	movs	r3, #18
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b006      	add	sp, #24
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	40021000 	.word	0x40021000
 800316c:	fffffcff 	.word	0xfffffcff
 8003170:	fffeffff 	.word	0xfffeffff
 8003174:	00001388 	.word	0x00001388
 8003178:	efffffff 	.word	0xefffffff
 800317c:	ffffcfff 	.word	0xffffcfff
 8003180:	ffff3fff 	.word	0xffff3fff

08003184 <memset>:
 8003184:	0003      	movs	r3, r0
 8003186:	1882      	adds	r2, r0, r2
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	7019      	strb	r1, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	2600      	movs	r6, #0
 8003198:	4c0c      	ldr	r4, [pc, #48]	@ (80031cc <__libc_init_array+0x38>)
 800319a:	4d0d      	ldr	r5, [pc, #52]	@ (80031d0 <__libc_init_array+0x3c>)
 800319c:	1b64      	subs	r4, r4, r5
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	2600      	movs	r6, #0
 80031a6:	f000 f819 	bl	80031dc <_init>
 80031aa:	4c0a      	ldr	r4, [pc, #40]	@ (80031d4 <__libc_init_array+0x40>)
 80031ac:	4d0a      	ldr	r5, [pc, #40]	@ (80031d8 <__libc_init_array+0x44>)
 80031ae:	1b64      	subs	r4, r4, r5
 80031b0:	10a4      	asrs	r4, r4, #2
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	00b3      	lsls	r3, r6, #2
 80031ba:	58eb      	ldr	r3, [r5, r3]
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	00b3      	lsls	r3, r6, #2
 80031c4:	58eb      	ldr	r3, [r5, r3]
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	08003234 	.word	0x08003234
 80031d0:	08003234 	.word	0x08003234
 80031d4:	08003238 	.word	0x08003238
 80031d8:	08003234 	.word	0x08003234

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
