
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003174  08003174  00004174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031b4  080031b4  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031b4  080031b4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080031c8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031c8  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1e8  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c1  00000000  00000000  0001221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000142e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00015050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e0d  00000000  00000000  00015ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010908  00000000  00000000  000178e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077d45  00000000  00000000  000281ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ff2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  0009ff74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000a3004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800315c 	.word	0x0800315c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800315c 	.word	0x0800315c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd67 	bl	8000cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f902 	bl	8000434 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f864 	bl	80002fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000234:	f000 f8a2 	bl	800037c <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  move_clockwise(256, 1000);  // 256 half revolution
 8000238:	23fa      	movs	r3, #250	@ 0xfa
 800023a:	009a      	lsls	r2, r3, #2
 800023c:	2380      	movs	r3, #128	@ 0x80
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fae1 	bl	800080a <move_clockwise>
	  HAL_Delay(100);
 8000248:	2064      	movs	r0, #100	@ 0x64
 800024a:	f000 fdd1 	bl	8000df0 <HAL_Delay>
	  move_anticlockwise(128, 1000); // 128 quarter revolution
 800024e:	23fa      	movs	r3, #250	@ 0xfa
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0019      	movs	r1, r3
 8000254:	2080      	movs	r0, #128	@ 0x80
 8000256:	f000 f9a1 	bl	800059c <move_anticlockwise>
	  HAL_Delay(100);
 800025a:	2064      	movs	r0, #100	@ 0x64
 800025c:	f000 fdc8 	bl	8000df0 <HAL_Delay>
	  move_clockwise(256, 1000);  // 256 half revolution
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	e7e9      	b.n	8000238 <main+0x18>

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b08d      	sub	sp, #52	@ 0x34
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	2414      	movs	r4, #20
 800026c:	193b      	adds	r3, r7, r4
 800026e:	0018      	movs	r0, r3
 8000270:	231c      	movs	r3, #28
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f002 ff45 	bl	8003104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027a:	003b      	movs	r3, r7
 800027c:	0018      	movs	r0, r3
 800027e:	2314      	movs	r3, #20
 8000280:	001a      	movs	r2, r3
 8000282:	2100      	movs	r1, #0
 8000284:	f002 ff3e 	bl	8003104 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <SystemClock_Config+0x94>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b1a      	ldr	r3, [pc, #104]	@ (80002f8 <SystemClock_Config+0x94>)
 800028e:	2107      	movs	r1, #7
 8000290:	438a      	bics	r2, r1
 8000292:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2280      	movs	r2, #128	@ 0x80
 800029e:	0052      	lsls	r2, r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2280      	movs	r2, #128	@ 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2240      	movs	r2, #64	@ 0x40
 80002ae:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	f002 f876 	bl	80023a4 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002bc:	f000 f94e 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	003b      	movs	r3, r7
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002d8:	003b      	movs	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	003b      	movs	r3, r7
 80002e0:	2100      	movs	r1, #0
 80002e2:	0018      	movs	r0, r3
 80002e4:	f002 fa42 	bl	800276c <HAL_RCC_ClockConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002ec:	f000 f936 	bl	800055c <Error_Handler>
  }
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b00d      	add	sp, #52	@ 0x34
 80002f6:	bd90      	pop	{r4, r7, pc}
 80002f8:	40022000 	.word	0x40022000

080002fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000302:	4a1c      	ldr	r2, [pc, #112]	@ (8000374 <MX_I2C1_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000308:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <MX_I2C1_Init+0x7c>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 100;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <MX_I2C1_Init+0x74>)
 800030e:	2264      	movs	r2, #100	@ 0x64
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000312:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <MX_I2C1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000338:	0018      	movs	r0, r3
 800033a:	f001 f869 	bl	8001410 <HAL_I2C_Init>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000342:	f000 f90b 	bl	800055c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000346:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000348:	2100      	movs	r1, #0
 800034a:	0018      	movs	r0, r3
 800034c:	f001 ff92 	bl	8002274 <HAL_I2CEx_ConfigAnalogFilter>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000354:	f000 f902 	bl	800055c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000358:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <MX_I2C1_Init+0x74>)
 800035a:	2100      	movs	r1, #0
 800035c:	0018      	movs	r0, r3
 800035e:	f001 ffd5 	bl	800230c <HAL_I2CEx_ConfigDigitalFilter>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000366:	f000 f8f9 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028
 8000374:	40005400 	.word	0x40005400
 8000378:	00402d41 	.word	0x00402d41

0800037c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	2310      	movs	r3, #16
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	0018      	movs	r0, r3
 8000388:	2310      	movs	r3, #16
 800038a:	001a      	movs	r2, r3
 800038c:	2100      	movs	r1, #0
 800038e:	f002 feb9 	bl	8003104 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	0018      	movs	r0, r3
 8000396:	230c      	movs	r3, #12
 8000398:	001a      	movs	r2, r3
 800039a:	2100      	movs	r1, #0
 800039c:	f002 feb2 	bl	8003104 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003a2:	4a22      	ldr	r2, [pc, #136]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000430 <MX_TIM1_Init+0xb4>)
 80003b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f002 fbfb 	bl	8002bc8 <HAL_TIM_Base_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80003d6:	f000 f8c1 	bl	800055c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003da:	2110      	movs	r1, #16
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e4:	187a      	adds	r2, r7, r1
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_TIM1_Init+0xac>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f002 fc44 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003f4:	f000 f8b2 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_TIM1_Init+0xac>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f002 fe15 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800041a:	f000 f89f 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b008      	add	sp, #32
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000007c 	.word	0x2000007c
 800042c:	40012c00 	.word	0x40012c00
 8000430:	0000ffff 	.word	0x0000ffff

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b089      	sub	sp, #36	@ 0x24
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	240c      	movs	r4, #12
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2314      	movs	r3, #20
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 fe5d 	bl	8003104 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b43      	ldr	r3, [pc, #268]	@ (8000558 <MX_GPIO_Init+0x124>)
 800044c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800044e:	4b42      	ldr	r3, [pc, #264]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000450:	2102      	movs	r1, #2
 8000452:	430a      	orrs	r2, r1
 8000454:	635a      	str	r2, [r3, #52]	@ 0x34
 8000456:	4b40      	ldr	r3, [pc, #256]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800045a:	2202      	movs	r2, #2
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000462:	4b3d      	ldr	r3, [pc, #244]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000466:	4b3c      	ldr	r3, [pc, #240]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000468:	2104      	movs	r1, #4
 800046a:	430a      	orrs	r2, r1
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
 800046e:	4b3a      	ldr	r3, [pc, #232]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000472:	2204      	movs	r2, #4
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b37      	ldr	r3, [pc, #220]	@ (8000558 <MX_GPIO_Init+0x124>)
 800047c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800047e:	4b36      	ldr	r3, [pc, #216]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	635a      	str	r2, [r3, #52]	@ 0x34
 8000486:	4b34      	ldr	r3, [pc, #208]	@ (8000558 <MX_GPIO_Init+0x124>)
 8000488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000492:	23c8      	movs	r3, #200	@ 0xc8
 8000494:	0159      	lsls	r1, r3, #5
 8000496:	23a0      	movs	r3, #160	@ 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	0018      	movs	r0, r3
 800049e:	f000 ff99 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2201      	movs	r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2202      	movs	r2, #2
 80004ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2202      	movs	r2, #2
 80004be:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	193a      	adds	r2, r7, r4
 80004c2:	23a0      	movs	r3, #160	@ 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fe19 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2210      	movs	r2, #16
 80004d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2202      	movs	r2, #2
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2204      	movs	r2, #4
 80004ea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	193a      	adds	r2, r7, r4
 80004ee:	23a0      	movs	r3, #160	@ 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fe03 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	22c0      	movs	r2, #192	@ 0xc0
 80004fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2202      	movs	r2, #2
 8000504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2201      	movs	r2, #1
 8000516:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fded 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	22c8      	movs	r2, #200	@ 0xc8
 800052c:	0152      	lsls	r2, r2, #5
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2201      	movs	r2, #1
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	187a      	adds	r2, r7, r1
 8000544:	23a0      	movs	r3, #160	@ 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fdd8 	bl	8001100 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b009      	add	sp, #36	@ 0x24
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	40021000 	.word	0x40021000

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	e7fd      	b.n	8000564 <Error_Handler+0x8>

08000568 <microDelay>:
#include "stepper.h"

extern TIM_HandleTypeDef htim1;

void microDelay (uint16_t delay)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <microDelay+0x30>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <microDelay+0x30>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d3f8      	bcc.n	800057e <microDelay+0x16>
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	2000007c 	.word	0x2000007c

0800059c <move_anticlockwise>:

void move_anticlockwise (int steps, uint16_t delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	000a      	movs	r2, r1
 80005a6:	1cbb      	adds	r3, r7, #2
 80005a8:	801a      	strh	r2, [r3, #0]
  for(int i=0; i<steps; i=i+1)
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e122      	b.n	80007f6 <move_anticlockwise+0x25a>
  {
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80005b0:	23a0      	movs	r3, #160	@ 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 ff0b 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80005be:	2380      	movs	r3, #128	@ 0x80
 80005c0:	0059      	lsls	r1, r3, #1
 80005c2:	23a0      	movs	r3, #160	@ 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2200      	movs	r2, #0
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 ff03 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80005ce:	2380      	movs	r3, #128	@ 0x80
 80005d0:	0099      	lsls	r1, r3, #2
 80005d2:	23a0      	movs	r3, #160	@ 0xa0
 80005d4:	05db      	lsls	r3, r3, #23
 80005d6:	2200      	movs	r2, #0
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fefb 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	00d9      	lsls	r1, r3, #3
 80005e2:	23a0      	movs	r3, #160	@ 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fef3 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80005ee:	1cbb      	adds	r3, r7, #2
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ffb8 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80005f8:	23a0      	movs	r3, #160	@ 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fee7 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000606:	2380      	movs	r3, #128	@ 0x80
 8000608:	0059      	lsls	r1, r3, #1
 800060a:	23a0      	movs	r3, #160	@ 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2201      	movs	r2, #1
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fedf 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000616:	2380      	movs	r3, #128	@ 0x80
 8000618:	0099      	lsls	r1, r3, #2
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fed7 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	00d9      	lsls	r1, r3, #3
 800062a:	23a0      	movs	r3, #160	@ 0xa0
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fecf 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000636:	1cbb      	adds	r3, r7, #2
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff94 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000640:	23a0      	movs	r3, #160	@ 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fec3 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 800064e:	2380      	movs	r3, #128	@ 0x80
 8000650:	0059      	lsls	r1, r3, #1
 8000652:	23a0      	movs	r3, #160	@ 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2201      	movs	r2, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f000 febb 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	0099      	lsls	r1, r3, #2
 8000662:	23a0      	movs	r3, #160	@ 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f000 feb3 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 800066e:	2380      	movs	r3, #128	@ 0x80
 8000670:	00d9      	lsls	r1, r3, #3
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	0018      	movs	r0, r3
 800067a:	f000 feab 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 800067e:	1cbb      	adds	r3, r7, #2
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff70 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000688:	23a0      	movs	r3, #160	@ 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe9f 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000696:	2380      	movs	r3, #128	@ 0x80
 8000698:	0059      	lsls	r1, r3, #1
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2201      	movs	r2, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fe97 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80006a6:	2380      	movs	r3, #128	@ 0x80
 80006a8:	0099      	lsls	r1, r3, #2
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2201      	movs	r2, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fe8f 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	00d9      	lsls	r1, r3, #3
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2200      	movs	r2, #0
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe87 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80006c6:	1cbb      	adds	r3, r7, #2
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff ff4c 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fe7b 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	0059      	lsls	r1, r3, #1
 80006e2:	23a0      	movs	r3, #160	@ 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2200      	movs	r2, #0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fe73 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	0099      	lsls	r1, r3, #2
 80006f2:	23a0      	movs	r3, #160	@ 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2201      	movs	r2, #1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fe6b 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	00d9      	lsls	r1, r3, #3
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2200      	movs	r2, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fe63 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 800070e:	1cbb      	adds	r3, r7, #2
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff28 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000718:	23a0      	movs	r3, #160	@ 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fe57 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	0059      	lsls	r1, r3, #1
 800072a:	23a0      	movs	r3, #160	@ 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2200      	movs	r2, #0
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fe4f 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	0099      	lsls	r1, r3, #2
 800073a:	23a0      	movs	r3, #160	@ 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2201      	movs	r2, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fe47 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000746:	2380      	movs	r3, #128	@ 0x80
 8000748:	00d9      	lsls	r1, r3, #3
 800074a:	23a0      	movs	r3, #160	@ 0xa0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	2201      	movs	r2, #1
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fe3f 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000756:	1cbb      	adds	r3, r7, #2
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ff04 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000760:	23a0      	movs	r3, #160	@ 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fe33 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 800076e:	2380      	movs	r3, #128	@ 0x80
 8000770:	0059      	lsls	r1, r3, #1
 8000772:	23a0      	movs	r3, #160	@ 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	2200      	movs	r2, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fe2b 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	0099      	lsls	r1, r3, #2
 8000782:	23a0      	movs	r3, #160	@ 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2200      	movs	r2, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fe23 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	00d9      	lsls	r1, r3, #3
 8000792:	23a0      	movs	r3, #160	@ 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2201      	movs	r2, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fe1b 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 800079e:	1cbb      	adds	r3, r7, #2
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fee0 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80007a8:	23a0      	movs	r3, #160	@ 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fe0f 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	0059      	lsls	r1, r3, #1
 80007ba:	23a0      	movs	r3, #160	@ 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2200      	movs	r2, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fe07 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	0099      	lsls	r1, r3, #2
 80007ca:	23a0      	movs	r3, #160	@ 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2200      	movs	r2, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fdff 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	00d9      	lsls	r1, r3, #3
 80007da:	23a0      	movs	r3, #160	@ 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2201      	movs	r2, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fdf7 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80007e6:	1cbb      	adds	r3, r7, #2
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff febc 	bl	8000568 <microDelay>
  for(int i=0; i<steps; i=i+1)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	da00      	bge.n	8000800 <move_anticlockwise+0x264>
 80007fe:	e6d7      	b.n	80005b0 <move_anticlockwise+0x14>
  }
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b004      	add	sp, #16
 8000808:	bd80      	pop	{r7, pc}

0800080a <move_clockwise>:

void move_clockwise (int steps, uint16_t delay) // CV - Clockwise
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	000a      	movs	r2, r1
 8000814:	1cbb      	adds	r3, r7, #2
 8000816:	801a      	strh	r2, [r3, #0]
  for(int i=0; i<steps; i=i+1)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e122      	b.n	8000a64 <move_clockwise+0x25a>
  {
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 800081e:	23a0      	movs	r3, #160	@ 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2201      	movs	r2, #1
 8000824:	2101      	movs	r1, #1
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fdd4 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 800082c:	2380      	movs	r3, #128	@ 0x80
 800082e:	0059      	lsls	r1, r3, #1
 8000830:	23a0      	movs	r3, #160	@ 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	2200      	movs	r2, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fdcc 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	0099      	lsls	r1, r3, #2
 8000840:	23a0      	movs	r3, #160	@ 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fdc4 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	00d9      	lsls	r1, r3, #3
 8000850:	23a0      	movs	r3, #160	@ 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2201      	movs	r2, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fdbc 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 800085c:	1cbb      	adds	r3, r7, #2
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff fe81 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000866:	23a0      	movs	r3, #160	@ 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fdb0 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	0059      	lsls	r1, r3, #1
 8000878:	23a0      	movs	r3, #160	@ 0xa0
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fda8 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	0099      	lsls	r1, r3, #2
 8000888:	23a0      	movs	r3, #160	@ 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	2200      	movs	r2, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fda0 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	00d9      	lsls	r1, r3, #3
 8000898:	23a0      	movs	r3, #160	@ 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2201      	movs	r2, #1
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fd98 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fe5d 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80008ae:	23a0      	movs	r3, #160	@ 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fd8c 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	0059      	lsls	r1, r3, #1
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2200      	movs	r2, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fd84 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	0099      	lsls	r1, r3, #2
 80008d0:	23a0      	movs	r3, #160	@ 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fd7c 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	00d9      	lsls	r1, r3, #3
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	2201      	movs	r2, #1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fd74 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80008ec:	1cbb      	adds	r3, r7, #2
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fe39 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80008f6:	23a0      	movs	r3, #160	@ 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fd68 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	0059      	lsls	r1, r3, #1
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2200      	movs	r2, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fd60 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	0099      	lsls	r1, r3, #2
 8000918:	23a0      	movs	r3, #160	@ 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2201      	movs	r2, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fd58 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	00d9      	lsls	r1, r3, #3
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2200      	movs	r2, #0
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fd50 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000934:	1cbb      	adds	r3, r7, #2
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fe15 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 800093e:	23a0      	movs	r3, #160	@ 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fd44 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	0059      	lsls	r1, r3, #1
 8000950:	23a0      	movs	r3, #160	@ 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2201      	movs	r2, #1
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fd3c 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	0099      	lsls	r1, r3, #2
 8000960:	23a0      	movs	r3, #160	@ 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2201      	movs	r2, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fd34 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	00d9      	lsls	r1, r3, #3
 8000970:	23a0      	movs	r3, #160	@ 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	2200      	movs	r2, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fd2c 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 800097c:	1cbb      	adds	r3, r7, #2
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fdf1 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000986:	23a0      	movs	r3, #160	@ 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fd20 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000994:	2380      	movs	r3, #128	@ 0x80
 8000996:	0059      	lsls	r1, r3, #1
 8000998:	23a0      	movs	r3, #160	@ 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2201      	movs	r2, #1
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fd18 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	0099      	lsls	r1, r3, #2
 80009a8:	23a0      	movs	r3, #160	@ 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2200      	movs	r2, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fd10 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	00d9      	lsls	r1, r3, #3
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fd08 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 80009c4:	1cbb      	adds	r3, r7, #2
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fdcd 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80009ce:	23a0      	movs	r3, #160	@ 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fcfc 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	0059      	lsls	r1, r3, #1
 80009e0:	23a0      	movs	r3, #160	@ 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2201      	movs	r2, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fcf4 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	0099      	lsls	r1, r3, #2
 80009f0:	23a0      	movs	r3, #160	@ 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fcec 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80009fc:	2380      	movs	r3, #128	@ 0x80
 80009fe:	00d9      	lsls	r1, r3, #3
 8000a00:	23a0      	movs	r3, #160	@ 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	2200      	movs	r2, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fce4 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000a0c:	1cbb      	adds	r3, r7, #2
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fda9 	bl	8000568 <microDelay>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000a16:	23a0      	movs	r3, #160	@ 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fcd8 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	0059      	lsls	r1, r3, #1
 8000a28:	23a0      	movs	r3, #160	@ 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fcd0 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	0099      	lsls	r1, r3, #2
 8000a38:	23a0      	movs	r3, #160	@ 0xa0
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fcc8 	bl	80013d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	00d9      	lsls	r1, r3, #3
 8000a48:	23a0      	movs	r3, #160	@ 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fcc0 	bl	80013d4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8000a54:	1cbb      	adds	r3, r7, #2
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fd85 	bl	8000568 <microDelay>
  for(int i=0; i<steps; i=i+1)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	da00      	bge.n	8000a6e <move_clockwise+0x264>
 8000a6c:	e6d7      	b.n	800081e <move_clockwise+0x14>
  }
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0549      	lsls	r1, r1, #21
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	055b      	lsls	r3, r3, #21
 8000aac:	4013      	ands	r3, r2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b091      	sub	sp, #68	@ 0x44
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	232c      	movs	r3, #44	@ 0x2c
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	0018      	movs	r0, r3
 8000ace:	2314      	movs	r3, #20
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f002 fb16 	bl	8003104 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	2410      	movs	r4, #16
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	231c      	movs	r3, #28
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f002 fb0e 	bl	8003104 <memset>
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a26      	ldr	r2, [pc, #152]	@ (8000b88 <HAL_I2C_MspInit+0xc8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d145      	bne.n	8000b7e <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2202      	movs	r2, #2
 8000af6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 ff75 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b0a:	f7ff fd27 	bl	800055c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b14:	2102      	movs	r1, #2
 8000b16:	430a      	orrs	r2, r1
 8000b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b26:	212c      	movs	r1, #44	@ 0x2c
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	22c0      	movs	r2, #192	@ 0xc0
 8000b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2212      	movs	r2, #18
 8000b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2206      	movs	r2, #6
 8000b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <HAL_I2C_MspInit+0xd0>)
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	0010      	movs	r0, r2
 8000b4e:	f000 fad7 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b58:	2180      	movs	r1, #128	@ 0x80
 8000b5a:	0389      	lsls	r1, r1, #14
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_I2C_MspInit+0xcc>)
 8000b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	039b      	lsls	r3, r3, #14
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2017      	movs	r0, #23
 8000b74:	f000 fa0c 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000b78:	2017      	movs	r0, #23
 8000b7a:	f000 fa1e 	bl	8000fba <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b011      	add	sp, #68	@ 0x44
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	50000400 	.word	0x50000400

08000b94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b08b      	sub	sp, #44	@ 0x2c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	2414      	movs	r4, #20
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2314      	movs	r3, #20
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f002 faac 	bl	8003104 <memset>
  if(htim_base->Instance==TIM1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <HAL_TIM_Base_MspInit+0x8c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d130      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0109      	lsls	r1, r1, #4
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_TIM_Base_MspInit+0x90>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM1_CH2
    PA2     ------> TIM1_CH3
    PA3     ------> TIM1_CH4
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000bea:	0021      	movs	r1, r4
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	222e      	movs	r2, #46	@ 0x2e
 8000bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2205      	movs	r2, #5
 8000c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	187a      	adds	r2, r7, r1
 8000c0c:	23a0      	movs	r3, #160	@ 0xa0
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	0011      	movs	r1, r2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fa74 	bl	8001100 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b00b      	add	sp, #44	@ 0x2c
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40021000 	.word	0x40021000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8b2 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <I2C1_IRQHandler+0x2c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	23e0      	movs	r3, #224	@ 0xe0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d004      	beq.n	8000c78 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <I2C1_IRQHandler+0x2c>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fc8d 	bl	8001590 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000c76:	e003      	b.n	8000c80 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <I2C1_IRQHandler+0x2c>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fc6e 	bl	800155c <HAL_I2C_EV_IRQHandler>
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000028 	.word	0x20000028

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <SystemInit+0x14>)
 8000c92:	2280      	movs	r2, #128	@ 0x80
 8000c94:	0512      	lsls	r2, r2, #20
 8000c96:	609a      	str	r2, [r3, #8]
#endif
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff fff0 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cae:	e003      	b.n	8000cb8 <LoopCopyDataInit>

08000cb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000cb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cb6:	3104      	adds	r1, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cb8:	480a      	ldr	r0, [pc, #40]	@ (8000ce4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000cbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cc0:	d3f6      	bcc.n	8000cb0 <CopyDataInit>
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopForever+0x12>)
  b LoopFillZerobss
 8000cc4:	e002      	b.n	8000ccc <LoopFillZerobss>

08000cc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000cc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cca:	3204      	adds	r2, #4

08000ccc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <LoopForever+0x16>)
  cmp r2, r3
 8000cce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cd0:	d3f9      	bcc.n	8000cc6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f002 fa1f 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff faa3 	bl	8000220 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000ce0:	080031bc 	.word	0x080031bc
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000cf0:	200000cc 	.word	0x200000cc

08000cf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_IRQHandler>

08000cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f80e 	bl	8000d24 <HAL_InitTick>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff feb0 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <HAL_InitTick+0x88>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d02b      	beq.n	8000d94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <HAL_InitTick+0x8c>)
 8000d3e:	681c      	ldr	r4, [r3, #0]
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <HAL_InitTick+0x88>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	0019      	movs	r1, r3
 8000d46:	23fa      	movs	r3, #250	@ 0xfa
 8000d48:	0098      	lsls	r0, r3, #2
 8000d4a:	f7ff f9dd 	bl	8000108 <__udivsi3>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0019      	movs	r1, r3
 8000d52:	0020      	movs	r0, r4
 8000d54:	f7ff f9d8 	bl	8000108 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 f93d 	bl	8000fda <HAL_SYSTICK_Config>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d112      	bne.n	8000d8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d80a      	bhi.n	8000d80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	425b      	negs	r3, r3
 8000d70:	2200      	movs	r2, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f90c 	bl	8000f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <HAL_InitTick+0x90>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e00d      	b.n	8000d9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e008      	b.n	8000d9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e003      	b.n	8000d9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b005      	add	sp, #20
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	18d2      	adds	r2, r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	200000c8 	.word	0x200000c8

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	@ (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	200000c8 	.word	0x200000c8

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff fff0 	bl	8000ddc <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001a      	movs	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	189b      	adds	r3, r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	f7ff ffe0 	bl	8000ddc <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e4a:	d809      	bhi.n	8000e60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	231f      	movs	r3, #31
 8000e54:	401a      	ands	r2, r3
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__NVIC_EnableIRQ+0x30>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e80:	d828      	bhi.n	8000ed4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <__NVIC_SetPriority+0xd4>)
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	33c0      	adds	r3, #192	@ 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	589b      	ldr	r3, [r3, r2]
 8000e92:	1dfa      	adds	r2, r7, #7
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	0011      	movs	r1, r2
 8000e98:	2203      	movs	r2, #3
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	00d2      	lsls	r2, r2, #3
 8000e9e:	21ff      	movs	r1, #255	@ 0xff
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	43d2      	mvns	r2, r2
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	22ff      	movs	r2, #255	@ 0xff
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2303      	movs	r3, #3
 8000eba:	4003      	ands	r3, r0
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <__NVIC_SetPriority+0xd4>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	33c0      	adds	r3, #192	@ 0xc0
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ed2:	e031      	b.n	8000f38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0019      	movs	r1, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	400b      	ands	r3, r1
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3306      	adds	r3, #6
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	3304      	adds	r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	21ff      	movs	r1, #255	@ 0xff
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	22ff      	movs	r2, #255	@ 0xff
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	2303      	movs	r3, #3
 8000f16:	4003      	ands	r3, r0
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001c      	movs	r4, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	4023      	ands	r3, r4
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	3306      	adds	r3, #6
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	3304      	adds	r3, #4
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b003      	add	sp, #12
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	045b      	lsls	r3, r3, #17
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d301      	bcc.n	8000f60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e010      	b.n	8000f82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <SysTick_Config+0x44>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	3a01      	subs	r2, #1
 8000f66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f68:	2301      	movs	r3, #1
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff ff7c 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x44>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x44>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	1c02      	adds	r2, r0, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff ff33 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ffaf 	bl	8000f48 <SysTick_Config>
 8000fea:	0003      	movs	r3, r0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2224      	movs	r2, #36	@ 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2224      	movs	r2, #36	@ 0x24
 8001010:	5c9b      	ldrb	r3, [r3, r2]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_DMA_Abort_IT+0x26>
 8001016:	2302      	movs	r3, #2
 8001018:	e05e      	b.n	80010d8 <HAL_DMA_Abort_IT+0xe4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2224      	movs	r2, #36	@ 0x24
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2225      	movs	r2, #37	@ 0x25
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d007      	beq.n	800103e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2204      	movs	r2, #4
 8001032:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e049      	b.n	80010d2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	210e      	movs	r1, #14
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	438a      	bics	r2, r1
 800105c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	491d      	ldr	r1, [pc, #116]	@ (80010e0 <HAL_DMA_Abort_IT+0xec>)
 800106a:	400a      	ands	r2, r1
 800106c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_DMA_Abort_IT+0xf0>)
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	221c      	movs	r2, #28
 8001078:	4013      	ands	r3, r2
 800107a:	2201      	movs	r2, #1
 800107c:	409a      	lsls	r2, r3
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <HAL_DMA_Abort_IT+0xf0>)
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800108c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010a0:	490f      	ldr	r1, [pc, #60]	@ (80010e0 <HAL_DMA_Abort_IT+0xec>)
 80010a2:	400a      	ands	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80010ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2225      	movs	r2, #37	@ 0x25
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2224      	movs	r2, #36	@ 0x24
 80010bc:	2100      	movs	r1, #0
 80010be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	0010      	movs	r0, r2
 80010d0:	4798      	blx	r3
    }
  }
  return status;
 80010d2:	230f      	movs	r3, #15
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b004      	add	sp, #16
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	fffffeff 	.word	0xfffffeff
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2225      	movs	r2, #37	@ 0x25
 80010f4:	5c9b      	ldrb	r3, [r3, r2]
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800110e:	e14d      	b.n	80013ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <HAL_GPIO_Init+0x28>
 8001126:	e13e      	b.n	80013a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x38>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b12      	cmp	r3, #18
 8001136:	d125      	bne.n	8001184 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	58d3      	ldr	r3, [r2, r3]
 8001144:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	2207      	movs	r2, #7
 800114a:	4013      	ands	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	220f      	movs	r2, #15
 8001162:	401a      	ands	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2107      	movs	r1, #7
 8001168:	400b      	ands	r3, r1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	6979      	ldr	r1, [r7, #20]
 8001182:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	43da      	mvns	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	401a      	ands	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d00b      	beq.n	80011d8 <HAL_GPIO_Init+0xd8>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011cc:	2b11      	cmp	r3, #17
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b12      	cmp	r3, #18
 80011d6:	d130      	bne.n	800123a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	409a      	lsls	r2, r3
 80011fa:	0013      	movs	r3, r2
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120e:	2201      	movs	r2, #1
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	4013      	ands	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	2201      	movs	r2, #1
 8001226:	401a      	ands	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d017      	beq.n	8001272 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4013      	ands	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	055b      	lsls	r3, r3, #21
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_GPIO_Init+0x180>
 800127e:	e092      	b.n	80013a6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001280:	4a50      	ldr	r2, [pc, #320]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3318      	adds	r3, #24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	589b      	ldr	r3, [r3, r2]
 800128c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	220f      	movs	r2, #15
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	43da      	mvns	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4013      	ands	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	23a0      	movs	r3, #160	@ 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x1d6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a45      	ldr	r2, [pc, #276]	@ (80013c8 <HAL_GPIO_Init+0x2c8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x1d2>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a44      	ldr	r2, [pc, #272]	@ (80013cc <HAL_GPIO_Init+0x2cc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x1ce>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a43      	ldr	r2, [pc, #268]	@ (80013d0 <HAL_GPIO_Init+0x2d0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x1ca>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x1d8>
 80012ca:	2306      	movs	r3, #6
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x1d8>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x1d8>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x1d8>
 80012d6:	2300      	movs	r3, #0
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	2103      	movs	r1, #3
 80012dc:	400a      	ands	r2, r1
 80012de:	00d2      	lsls	r2, r2, #3
 80012e0:	4093      	lsls	r3, r2
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80012e8:	4936      	ldr	r1, [pc, #216]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3318      	adds	r3, #24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80012f6:	4a33      	ldr	r2, [pc, #204]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	58d3      	ldr	r3, [r2, r3]
 80012fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4013      	ands	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800131c:	4929      	ldr	r1, [pc, #164]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001324:	4a27      	ldr	r2, [pc, #156]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 8001326:	2384      	movs	r3, #132	@ 0x84
 8001328:	58d3      	ldr	r3, [r2, r3]
 800132a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43da      	mvns	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	4013      	ands	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	029b      	lsls	r3, r3, #10
 800133e:	4013      	ands	r3, r2
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800134a:	491e      	ldr	r1, [pc, #120]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 800134c:	2284      	movs	r2, #132	@ 0x84
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43da      	mvns	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4013      	ands	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	035b      	lsls	r3, r3, #13
 800136a:	4013      	ands	r3, r2
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43da      	mvns	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	4013      	ands	r3, r2
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_GPIO_Init+0x2c4>)
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	3301      	adds	r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	40da      	lsrs	r2, r3
 80013b4:	1e13      	subs	r3, r2, #0
 80013b6:	d000      	beq.n	80013ba <HAL_GPIO_Init+0x2ba>
 80013b8:	e6aa      	b.n	8001110 <HAL_GPIO_Init+0x10>
  }
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b006      	add	sp, #24
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021800 	.word	0x40021800
 80013c8:	50000400 	.word	0x50000400
 80013cc:	50000800 	.word	0x50000800
 80013d0:	50001400 	.word	0x50001400

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	0008      	movs	r0, r1
 80013de:	0011      	movs	r1, r2
 80013e0:	1cbb      	adds	r3, r7, #2
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	1c7b      	adds	r3, r7, #1
 80013e8:	1c0a      	adds	r2, r1, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ec:	1c7b      	adds	r3, r7, #1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fe:	1cbb      	adds	r3, r7, #2
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e08f      	b.n	8001542 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2241      	movs	r2, #65	@ 0x41
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff fb41 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2241      	movs	r2, #65	@ 0x41
 8001442:	2124      	movs	r1, #36	@ 0x24
 8001444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	493b      	ldr	r1, [pc, #236]	@ (800154c <HAL_I2C_Init+0x13c>)
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4938      	ldr	r1, [pc, #224]	@ (8001550 <HAL_I2C_Init+0x140>)
 8001470:	400a      	ands	r2, r1
 8001472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0209      	lsls	r1, r1, #8
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e007      	b.n	800149e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2184      	movs	r1, #132	@ 0x84
 8001498:	0209      	lsls	r1, r1, #8
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d109      	bne.n	80014ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	0109      	lsls	r1, r1, #4
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	e007      	b.n	80014ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4923      	ldr	r1, [pc, #140]	@ (8001554 <HAL_I2C_Init+0x144>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4920      	ldr	r1, [pc, #128]	@ (8001558 <HAL_I2C_Init+0x148>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	491a      	ldr	r1, [pc, #104]	@ (8001550 <HAL_I2C_Init+0x140>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69d9      	ldr	r1, [r3, #28]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1a      	ldr	r2, [r3, #32]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	@ 0x41
 800152e:	2120      	movs	r1, #32
 8001530:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2242      	movs	r2, #66	@ 0x42
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	f0ffffff 	.word	0xf0ffffff
 8001550:	ffff7fff 	.word	0xffff7fff
 8001554:	fffff7ff 	.word	0xfffff7ff
 8001558:	02008000 	.word	0x02008000

0800155c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	001a      	movs	r2, r3
 80015ae:	2301      	movs	r3, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	d010      	beq.n	80015d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	09db      	lsrs	r3, r3, #7
 80015b8:	001a      	movs	r2, r3
 80015ba:	2301      	movs	r3, #1
 80015bc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80015be:	d00a      	beq.n	80015d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c4:	2201      	movs	r2, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	0052      	lsls	r2, r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	0a9b      	lsrs	r3, r3, #10
 80015da:	001a      	movs	r2, r3
 80015dc:	2301      	movs	r3, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	d010      	beq.n	8001604 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	001a      	movs	r2, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80015ec:	d00a      	beq.n	8001604 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	2208      	movs	r2, #8
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2280      	movs	r2, #128	@ 0x80
 8001600:	00d2      	lsls	r2, r2, #3
 8001602:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	001a      	movs	r2, r3
 800160a:	2301      	movs	r3, #1
 800160c:	4013      	ands	r3, r2
 800160e:	d010      	beq.n	8001632 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	09db      	lsrs	r3, r3, #7
 8001614:	001a      	movs	r2, r3
 8001616:	2301      	movs	r3, #1
 8001618:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800161a:	d00a      	beq.n	8001632 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	2202      	movs	r2, #2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	220b      	movs	r2, #11
 800163c:	4013      	ands	r3, r2
 800163e:	d005      	beq.n	800164c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fc44 	bl	8001ed4 <I2C_ITError>
  }
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b006      	add	sp, #24
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	0008      	movs	r0, r1
 800167e:	0011      	movs	r1, r2
 8001680:	1cfb      	adds	r3, r7, #3
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	003b      	movs	r3, r7
 8001688:	1c0a      	adds	r2, r1, #0
 800168a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80016bc:	46c0      	nop			@ (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b002      	add	sp, #8
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2240      	movs	r2, #64	@ 0x40
 80016de:	5c9b      	ldrb	r3, [r3, r2]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <I2C_Slave_ISR_IT+0x24>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e0fb      	b.n	80018e0 <I2C_Slave_ISR_IT+0x21c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2240      	movs	r2, #64	@ 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	001a      	movs	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d00c      	beq.n	8001716 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	001a      	movs	r2, r3
 8001702:	2301      	movs	r3, #1
 8001704:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001706:	d006      	beq.n	8001716 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	0011      	movs	r1, r2
 800170e:	0018      	movs	r0, r3
 8001710:	f000 f9f6 	bl	8001b00 <I2C_ITSlaveCplt>
 8001714:	e0df      	b.n	80018d6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	001a      	movs	r2, r3
 800171c:	2301      	movs	r3, #1
 800171e:	4013      	ands	r3, r2
 8001720:	d054      	beq.n	80017cc <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	001a      	movs	r2, r3
 8001728:	2301      	movs	r3, #1
 800172a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800172c:	d04e      	beq.n	80017cc <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d12d      	bne.n	8001794 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2241      	movs	r2, #65	@ 0x41
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b28      	cmp	r3, #40	@ 0x28
 8001742:	d10b      	bne.n	800175c <I2C_Slave_ISR_IT+0x98>
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	049b      	lsls	r3, r3, #18
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0011      	movs	r1, r2
 8001754:	0018      	movs	r0, r3
 8001756:	f000 fb63 	bl	8001e20 <I2C_ITListenCplt>
 800175a:	e036      	b.n	80017ca <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2241      	movs	r2, #65	@ 0x41
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b29      	cmp	r3, #41	@ 0x29
 8001766:	d110      	bne.n	800178a <I2C_Slave_ISR_IT+0xc6>
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <I2C_Slave_ISR_IT+0x224>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00c      	beq.n	800178a <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fcd5 	bl	800212a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	0018      	movs	r0, r3
 8001784:	f000 f956 	bl	8001a34 <I2C_ITSlaveSeqCplt>
 8001788:	e01f      	b.n	80017ca <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2210      	movs	r2, #16
 8001790:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001792:	e09d      	b.n	80018d0 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	2204      	movs	r2, #4
 80017a2:	431a      	orrs	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <I2C_Slave_ISR_IT+0xf6>
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	045b      	lsls	r3, r3, #17
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d000      	beq.n	80017ba <I2C_Slave_ISR_IT+0xf6>
 80017b8:	e08a      	b.n	80018d0 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 fb86 	bl	8001ed4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80017c8:	e082      	b.n	80018d0 <I2C_Slave_ISR_IT+0x20c>
 80017ca:	e081      	b.n	80018d0 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	001a      	movs	r2, r3
 80017d2:	2301      	movs	r3, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d031      	beq.n	800183c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	001a      	movs	r2, r3
 80017de:	2301      	movs	r3, #1
 80017e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80017e2:	d02b      	beq.n	800183c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d018      	beq.n	8001820 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	3b01      	subs	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d154      	bne.n	80018d4 <I2C_Slave_ISR_IT+0x210>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4a2e      	ldr	r2, [pc, #184]	@ (80018e8 <I2C_Slave_ISR_IT+0x224>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d050      	beq.n	80018d4 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f8fd 	bl	8001a34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800183a:	e04b      	b.n	80018d4 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	001a      	movs	r2, r3
 8001842:	2301      	movs	r3, #1
 8001844:	4013      	ands	r3, r2
 8001846:	d00c      	beq.n	8001862 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	001a      	movs	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001852:	d006      	beq.n	8001862 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f846 	bl	80018ec <I2C_ITAddrCplt>
 8001860:	e039      	b.n	80018d6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	001a      	movs	r2, r3
 8001868:	2301      	movs	r3, #1
 800186a:	4013      	ands	r3, r2
 800186c:	d033      	beq.n	80018d6 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	001a      	movs	r2, r3
 8001874:	2301      	movs	r3, #1
 8001876:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001878:	d02d      	beq.n	80018d6 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187e:	b29b      	uxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d018      	beq.n	80018b6 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80018b4:	e00f      	b.n	80018d6 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	045b      	lsls	r3, r3, #17
 80018bc:	429a      	cmp	r2, r3
 80018be:	d002      	beq.n	80018c6 <I2C_Slave_ISR_IT+0x202>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8b3 	bl	8001a34 <I2C_ITSlaveSeqCplt>
 80018ce:	e002      	b.n	80018d6 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	e000      	b.n	80018d6 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 80018d4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b006      	add	sp, #24
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	ffff0000 	.word	0xffff0000

080018ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2241      	movs	r2, #65	@ 0x41
 80018fa:	5c9b      	ldrb	r3, [r3, r2]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	001a      	movs	r2, r3
 8001900:	2328      	movs	r3, #40	@ 0x28
 8001902:	4013      	ands	r3, r2
 8001904:	2b28      	cmp	r3, #40	@ 0x28
 8001906:	d000      	beq.n	800190a <I2C_ITAddrCplt+0x1e>
 8001908:	e088      	b.n	8001a1c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	b2da      	uxtb	r2, r3
 8001914:	250f      	movs	r5, #15
 8001916:	197b      	adds	r3, r7, r5
 8001918:	2101      	movs	r1, #1
 800191a:	400a      	ands	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	b29a      	uxth	r2, r3
 8001928:	200c      	movs	r0, #12
 800192a:	183b      	adds	r3, r7, r0
 800192c:	21fe      	movs	r1, #254	@ 0xfe
 800192e:	400a      	ands	r2, r1
 8001930:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	b29a      	uxth	r2, r3
 800193a:	240a      	movs	r4, #10
 800193c:	193b      	adds	r3, r7, r4
 800193e:	0592      	lsls	r2, r2, #22
 8001940:	0d92      	lsrs	r2, r2, #22
 8001942:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	b29a      	uxth	r2, r3
 800194c:	2308      	movs	r3, #8
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	21fe      	movs	r1, #254	@ 0xfe
 8001952:	400a      	ands	r2, r1
 8001954:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d148      	bne.n	80019f0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800195e:	0021      	movs	r1, r4
 8001960:	187b      	adds	r3, r7, r1
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	09db      	lsrs	r3, r3, #7
 8001966:	b29a      	uxth	r2, r3
 8001968:	183b      	adds	r3, r7, r0
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	4053      	eors	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	001a      	movs	r2, r3
 8001972:	2306      	movs	r3, #6
 8001974:	4013      	ands	r3, r2
 8001976:	d120      	bne.n	80019ba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001978:	183b      	adds	r3, r7, r0
 800197a:	187a      	adds	r2, r7, r1
 800197c:	8812      	ldrh	r2, [r2, #0]
 800197e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198e:	2b02      	cmp	r3, #2
 8001990:	d14c      	bne.n	8001a2c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2208      	movs	r2, #8
 800199e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019a8:	183b      	adds	r3, r7, r0
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	7819      	ldrb	r1, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff fe5e 	bl	8001674 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80019b8:	e038      	b.n	8001a2c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80019ba:	240c      	movs	r4, #12
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	2208      	movs	r2, #8
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	021a      	lsls	r2, r3, #8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0011      	movs	r1, r2
 80019ce:	0018      	movs	r0, r3
 80019d0:	f000 fbec 	bl	80021ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2240      	movs	r2, #64	@ 0x40
 80019d8:	2100      	movs	r1, #0
 80019da:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	230f      	movs	r3, #15
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	7819      	ldrb	r1, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff fe43 	bl	8001674 <HAL_I2C_AddrCallback>
}
 80019ee:	e01d      	b.n	8001a2c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	021a      	lsls	r2, r3, #8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 fbd7 	bl	80021ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2240      	movs	r2, #64	@ 0x40
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a06:	230c      	movs	r3, #12
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	7819      	ldrb	r1, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff fe2d 	bl	8001674 <HAL_I2C_AddrCallback>
}
 8001a1a:	e007      	b.n	8001a2c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]
}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bdb0      	pop	{r4, r5, r7, pc}

08001a34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2242      	movs	r2, #66	@ 0x42
 8001a48:	2100      	movs	r1, #0
 8001a4a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	0b9b      	lsrs	r3, r3, #14
 8001a50:	001a      	movs	r2, r3
 8001a52:	2301      	movs	r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d008      	beq.n	8001a6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4925      	ldr	r1, [pc, #148]	@ (8001af8 <I2C_ITSlaveSeqCplt+0xc4>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00d      	b.n	8001a86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0bdb      	lsrs	r3, r3, #15
 8001a6e:	001a      	movs	r2, r3
 8001a70:	2301      	movs	r3, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	d007      	beq.n	8001a86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	491e      	ldr	r1, [pc, #120]	@ (8001afc <I2C_ITSlaveSeqCplt+0xc8>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2241      	movs	r2, #65	@ 0x41
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b29      	cmp	r3, #41	@ 0x29
 8001a90:	d114      	bne.n	8001abc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2241      	movs	r2, #65	@ 0x41
 8001a96:	2128      	movs	r1, #40	@ 0x28
 8001a98:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2221      	movs	r2, #33	@ 0x21
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 fb81 	bl	80021ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fdcd 	bl	8001654 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001aba:	e019      	b.n	8001af0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2241      	movs	r2, #65	@ 0x41
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ac6:	d113      	bne.n	8001af0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2241      	movs	r2, #65	@ 0x41
 8001acc:	2128      	movs	r1, #40	@ 0x28
 8001ace:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2222      	movs	r2, #34	@ 0x22
 8001ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2102      	movs	r1, #2
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 fb66 	bl	80021ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2240      	movs	r2, #64	@ 0x40
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fdba 	bl	8001664 <HAL_I2C_SlaveRxCpltCallback>
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	ffffbfff 	.word	0xffffbfff
 8001afc:	ffff7fff 	.word	0xffff7fff

08001b00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b1c:	200b      	movs	r0, #11
 8001b1e:	183b      	adds	r3, r7, r0
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	2141      	movs	r1, #65	@ 0x41
 8001b24:	5c52      	ldrb	r2, [r2, r1]
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b21      	cmp	r3, #33	@ 0x21
 8001b36:	d003      	beq.n	8001b40 <I2C_ITSlaveCplt+0x40>
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b29      	cmp	r3, #41	@ 0x29
 8001b3e:	d109      	bne.n	8001b54 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b40:	4ab0      	ldr	r2, [pc, #704]	@ (8001e04 <I2C_ITSlaveCplt+0x304>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	0011      	movs	r1, r2
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fb30 	bl	80021ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2221      	movs	r2, #33	@ 0x21
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b52:	e020      	b.n	8001b96 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b54:	220b      	movs	r2, #11
 8001b56:	18bb      	adds	r3, r7, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b22      	cmp	r3, #34	@ 0x22
 8001b5c:	d003      	beq.n	8001b66 <I2C_ITSlaveCplt+0x66>
 8001b5e:	18bb      	adds	r3, r7, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b64:	d109      	bne.n	8001b7a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b66:	4aa8      	ldr	r2, [pc, #672]	@ (8001e08 <I2C_ITSlaveCplt+0x308>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fb1d 	bl	80021ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2222      	movs	r2, #34	@ 0x22
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b78:	e00d      	b.n	8001b96 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b28      	cmp	r3, #40	@ 0x28
 8001b82:	d108      	bne.n	8001b96 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001b84:	4aa1      	ldr	r2, [pc, #644]	@ (8001e0c <I2C_ITSlaveCplt+0x30c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fb0e 	bl	80021ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2180      	movs	r1, #128	@ 0x80
 8001ba2:	0209      	lsls	r1, r1, #8
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4997      	ldr	r1, [pc, #604]	@ (8001e10 <I2C_ITSlaveCplt+0x310>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 fab5 	bl	800212a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	0b9b      	lsrs	r3, r3, #14
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	498f      	ldr	r1, [pc, #572]	@ (8001e14 <I2C_ITSlaveCplt+0x314>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf2:	e018      	b.n	8001c26 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	0bdb      	lsrs	r3, r3, #15
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d012      	beq.n	8001c26 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4983      	ldr	r1, [pc, #524]	@ (8001e18 <I2C_ITSlaveCplt+0x318>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d020      	beq.n	8001c74 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2204      	movs	r2, #4
 8001c36:	4393      	bics	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	2204      	movs	r2, #4
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	001a      	movs	r2, r3
 8001c90:	2301      	movs	r3, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d051      	beq.n	8001d3a <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ca0:	d04b      	beq.n	8001d3a <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12d      	bne.n	8001d08 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2241      	movs	r2, #65	@ 0x41
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b28      	cmp	r3, #40	@ 0x28
 8001cb6:	d10b      	bne.n	8001cd0 <I2C_ITSlaveCplt+0x1d0>
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	049b      	lsls	r3, r3, #18
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d106      	bne.n	8001cd0 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f8a9 	bl	8001e20 <I2C_ITListenCplt>
 8001cce:	e034      	b.n	8001d3a <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	@ 0x41
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b29      	cmp	r3, #41	@ 0x29
 8001cda:	d110      	bne.n	8001cfe <I2C_ITSlaveCplt+0x1fe>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a4f      	ldr	r2, [pc, #316]	@ (8001e1c <I2C_ITSlaveCplt+0x31c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00c      	beq.n	8001cfe <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fa1b 	bl	800212a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7ff fe9c 	bl	8001a34 <I2C_ITSlaveSeqCplt>
 8001cfc:	e01d      	b.n	8001d3a <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	61da      	str	r2, [r3, #28]
 8001d06:	e018      	b.n	8001d3a <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	2204      	movs	r2, #4
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <I2C_ITSlaveCplt+0x22c>
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	045b      	lsls	r3, r3, #17
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f8cd 	bl	8001ed4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2242      	movs	r2, #66	@ 0x42
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f8bb 	bl	8001ed4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	@ 0x41
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b28      	cmp	r3, #40	@ 0x28
 8001d68:	d147      	bne.n	8001dfa <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f855 	bl	8001e20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d76:	e040      	b.n	8001dfa <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <I2C_ITSlaveCplt+0x31c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d016      	beq.n	8001db0 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fe55 	bl	8001a34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <I2C_ITSlaveCplt+0x31c>)
 8001d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2241      	movs	r2, #65	@ 0x41
 8001d94:	2120      	movs	r1, #32
 8001d96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2240      	movs	r2, #64	@ 0x40
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff fc73 	bl	8001694 <HAL_I2C_ListenCpltCallback>
}
 8001dae:	e024      	b.n	8001dfa <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2241      	movs	r2, #65	@ 0x41
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b22      	cmp	r3, #34	@ 0x22
 8001dba:	d10f      	bne.n	8001ddc <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2241      	movs	r2, #65	@ 0x41
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2240      	movs	r2, #64	@ 0x40
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fc45 	bl	8001664 <HAL_I2C_SlaveRxCpltCallback>
}
 8001dda:	e00e      	b.n	8001dfa <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2241      	movs	r2, #65	@ 0x41
 8001de0:	2120      	movs	r1, #32
 8001de2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2240      	movs	r2, #64	@ 0x40
 8001dee:	2100      	movs	r1, #0
 8001df0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff fc2d 	bl	8001654 <HAL_I2C_SlaveTxCpltCallback>
}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	00008001 	.word	0x00008001
 8001e08:	00008002 	.word	0x00008002
 8001e0c:	00008003 	.word	0x00008003
 8001e10:	fe00e800 	.word	0xfe00e800
 8001e14:	ffffbfff 	.word	0xffffbfff
 8001e18:	ffff7fff 	.word	0xffff7fff
 8001e1c:	ffff0000 	.word	0xffff0000

08001e20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <I2C_ITListenCplt+0xac>)
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2241      	movs	r2, #65	@ 0x41
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2242      	movs	r2, #66	@ 0x42
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	001a      	movs	r2, r3
 8001e52:	2301      	movs	r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d022      	beq.n	8001e9e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	2204      	movs	r2, #4
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <I2C_ITListenCplt+0xb0>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f981 	bl	80021ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fbe9 	bl	8001694 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	ffff0000 	.word	0xffff0000
 8001ed0:	00008003 	.word	0x00008003

08001ed4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ede:	200f      	movs	r0, #15
 8001ee0:	183b      	adds	r3, r7, r0
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	2141      	movs	r1, #65	@ 0x41
 8001ee6:	5c52      	ldrb	r2, [r2, r1]
 8001ee8:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2242      	movs	r2, #66	@ 0x42
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a72      	ldr	r2, [pc, #456]	@ (80020c0 <I2C_ITError+0x1ec>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f0a:	183b      	adds	r3, r7, r0
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b28      	cmp	r3, #40	@ 0x28
 8001f10:	d007      	beq.n	8001f22 <I2C_ITError+0x4e>
 8001f12:	183b      	adds	r3, r7, r0
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b29      	cmp	r3, #41	@ 0x29
 8001f18:	d003      	beq.n	8001f22 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f20:	d10c      	bne.n	8001f3c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2103      	movs	r1, #3
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 f940 	bl	80021ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2241      	movs	r2, #65	@ 0x41
 8001f30:	2128      	movs	r1, #40	@ 0x28
 8001f32:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a63      	ldr	r2, [pc, #396]	@ (80020c4 <I2C_ITError+0x1f0>)
 8001f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f3a:	e032      	b.n	8001fa2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f3c:	4a62      	ldr	r2, [pc, #392]	@ (80020c8 <I2C_ITError+0x1f4>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0011      	movs	r1, r2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 f932 	bl	80021ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f8ed 	bl	800212a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2241      	movs	r2, #65	@ 0x41
 8001f54:	5c9b      	ldrb	r3, [r3, r2]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b60      	cmp	r3, #96	@ 0x60
 8001f5a:	d01f      	beq.n	8001f9c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2241      	movs	r2, #65	@ 0x41
 8001f60:	2120      	movs	r1, #32
 8001f62:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d114      	bne.n	8001f9c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d109      	bne.n	8001f94 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d03b      	beq.n	8002028 <I2C_ITError+0x154>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d002      	beq.n	8001fbc <I2C_ITError+0xe8>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b21      	cmp	r3, #33	@ 0x21
 8001fba:	d135      	bne.n	8002028 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	@ 0x80
 8001fc4:	01db      	lsls	r3, r3, #7
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d107      	bne.n	8001fe0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	493c      	ldr	r1, [pc, #240]	@ (80020cc <I2C_ITError+0x1f8>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff f87f 	bl	80010e8 <HAL_DMA_GetState>
 8001fea:	0003      	movs	r3, r0
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d016      	beq.n	800201e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	4a36      	ldr	r2, [pc, #216]	@ (80020d0 <I2C_ITError+0x1fc>)
 8001ff6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002004:	0018      	movs	r0, r3
 8002006:	f7fe fff5 	bl	8000ff4 <HAL_DMA_Abort_IT>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d051      	beq.n	80020b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002018:	0018      	movs	r0, r3
 800201a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800201c:	e049      	b.n	80020b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f859 	bl	80020d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002026:	e044      	b.n	80020b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03b      	beq.n	80020a8 <I2C_ITError+0x1d4>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d002      	beq.n	800203c <I2C_ITError+0x168>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b22      	cmp	r3, #34	@ 0x22
 800203a:	d135      	bne.n	80020a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	401a      	ands	r2, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	491e      	ldr	r1, [pc, #120]	@ (80020d4 <I2C_ITError+0x200>)
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff f83f 	bl	80010e8 <HAL_DMA_GetState>
 800206a:	0003      	movs	r3, r0
 800206c:	2b01      	cmp	r3, #1
 800206e:	d016      	beq.n	800209e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	4a16      	ldr	r2, [pc, #88]	@ (80020d0 <I2C_ITError+0x1fc>)
 8002076:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2240      	movs	r2, #64	@ 0x40
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002084:	0018      	movs	r0, r3
 8002086:	f7fe ffb5 	bl	8000ff4 <HAL_DMA_Abort_IT>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d013      	beq.n	80020b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002098:	0018      	movs	r0, r3
 800209a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800209c:	e00b      	b.n	80020b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f819 	bl	80020d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020a6:	e006      	b.n	80020b6 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f814 	bl	80020d8 <I2C_TreatErrorCallback>
  }
}
 80020b0:	e002      	b.n	80020b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	e000      	b.n	80020b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020b6:	46c0      	nop			@ (mov r8, r8)
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	ffff0000 	.word	0xffff0000
 80020c4:	080016c5 	.word	0x080016c5
 80020c8:	00008003 	.word	0x00008003
 80020cc:	ffffbfff 	.word	0xffffbfff
 80020d0:	0800216f 	.word	0x0800216f
 80020d4:	ffff7fff 	.word	0xffff7fff

080020d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2241      	movs	r2, #65	@ 0x41
 80020e4:	5c9b      	ldrb	r3, [r3, r2]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b60      	cmp	r3, #96	@ 0x60
 80020ea:	d10f      	bne.n	800210c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2241      	movs	r2, #65	@ 0x41
 80020f0:	2120      	movs	r1, #32
 80020f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2240      	movs	r2, #64	@ 0x40
 80020fe:	2100      	movs	r1, #0
 8002100:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff fad5 	bl	80016b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800210a:	e00a      	b.n	8002122 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2240      	movs	r2, #64	@ 0x40
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fac1 	bl	80016a4 <HAL_I2C_ErrorCallback>
}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d103      	bne.n	8002148 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2201      	movs	r2, #1
 8002150:	4013      	ands	r3, r2
 8002152:	2b01      	cmp	r3, #1
 8002154:	d007      	beq.n	8002166 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	619a      	str	r2, [r3, #24]
  }
}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}

0800216e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	2200      	movs	r2, #0
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff ff9a 	bl	80020d8 <I2C_TreatErrorCallback>
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	000a      	movs	r2, r1
 80021b6:	1cbb      	adds	r3, r7, #2
 80021b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80021be:	1cbb      	adds	r3, r7, #2
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d010      	beq.n	80021ea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2242      	movs	r2, #66	@ 0x42
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2241      	movs	r2, #65	@ 0x41
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	001a      	movs	r2, r3
 80021da:	2328      	movs	r3, #40	@ 0x28
 80021dc:	4013      	ands	r3, r2
 80021de:	2b28      	cmp	r3, #40	@ 0x28
 80021e0:	d003      	beq.n	80021ea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22b0      	movs	r2, #176	@ 0xb0
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80021ea:	1cbb      	adds	r3, r7, #2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d010      	beq.n	8002216 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2244      	movs	r2, #68	@ 0x44
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2241      	movs	r2, #65	@ 0x41
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	001a      	movs	r2, r3
 8002206:	2328      	movs	r3, #40	@ 0x28
 8002208:	4013      	ands	r3, r2
 800220a:	2b28      	cmp	r3, #40	@ 0x28
 800220c:	d003      	beq.n	8002216 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22b0      	movs	r2, #176	@ 0xb0
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002216:	1cbb      	adds	r3, r7, #2
 8002218:	2200      	movs	r2, #0
 800221a:	5e9b      	ldrsh	r3, [r3, r2]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da03      	bge.n	8002228 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	22b8      	movs	r2, #184	@ 0xb8
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002228:	1cbb      	adds	r3, r7, #2
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b10      	cmp	r3, #16
 800222e:	d103      	bne.n	8002238 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2290      	movs	r2, #144	@ 0x90
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002238:	1cbb      	adds	r3, r7, #2
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	2b20      	cmp	r3, #32
 800223e:	d103      	bne.n	8002248 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002248:	1cbb      	adds	r3, r7, #2
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b40      	cmp	r3, #64	@ 0x40
 800224e:	d103      	bne.n	8002258 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43d9      	mvns	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	46bd      	mov	sp, r7
 800226e:	b004      	add	sp, #16
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2241      	movs	r2, #65	@ 0x41
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	d138      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2240      	movs	r2, #64	@ 0x40
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002294:	2302      	movs	r3, #2
 8002296:	e032      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2240      	movs	r2, #64	@ 0x40
 800229c:	2101      	movs	r1, #1
 800229e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2241      	movs	r2, #65	@ 0x41
 80022a4:	2124      	movs	r1, #36	@ 0x24
 80022a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4911      	ldr	r1, [pc, #68]	@ (8002308 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2101      	movs	r1, #1
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2241      	movs	r2, #65	@ 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	@ 0x40
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	ffffefff 	.word	0xffffefff

0800230c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	@ 0x41
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d139      	bne.n	8002396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e033      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	@ 0x40
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2241      	movs	r2, #65	@ 0x41
 800233c:	2124      	movs	r1, #36	@ 0x24
 800233e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2241      	movs	r2, #65	@ 0x41
 8002386:	2120      	movs	r1, #32
 8002388:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2240      	movs	r2, #64	@ 0x40
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	fffff0ff 	.word	0xfffff0ff

080023a4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1d0      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	4013      	ands	r3, r2
 80023be:	d100      	bne.n	80023c2 <HAL_RCC_OscConfig+0x1e>
 80023c0:	e069      	b.n	8002496 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4bc8      	ldr	r3, [pc, #800]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2238      	movs	r2, #56	@ 0x38
 80023c8:	4013      	ands	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d105      	bne.n	80023de <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d15d      	bne.n	8002496 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1bc      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_OscConfig+0x56>
 80023ea:	4bbe      	ldr	r3, [pc, #760]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4bbd      	ldr	r3, [pc, #756]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	0249      	lsls	r1, r1, #9
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e020      	b.n	800243c <HAL_RCC_OscConfig+0x98>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	23a0      	movs	r3, #160	@ 0xa0
 8002400:	02db      	lsls	r3, r3, #11
 8002402:	429a      	cmp	r2, r3
 8002404:	d10e      	bne.n	8002424 <HAL_RCC_OscConfig+0x80>
 8002406:	4bb7      	ldr	r3, [pc, #732]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4bb6      	ldr	r3, [pc, #728]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	02c9      	lsls	r1, r1, #11
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4bb3      	ldr	r3, [pc, #716]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4bb2      	ldr	r3, [pc, #712]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800241a:	2180      	movs	r1, #128	@ 0x80
 800241c:	0249      	lsls	r1, r1, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x98>
 8002424:	4baf      	ldr	r3, [pc, #700]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4bae      	ldr	r3, [pc, #696]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800242a:	49af      	ldr	r1, [pc, #700]	@ (80026e8 <HAL_RCC_OscConfig+0x344>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4bac      	ldr	r3, [pc, #688]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4bab      	ldr	r3, [pc, #684]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002436:	49ad      	ldr	r1, [pc, #692]	@ (80026ec <HAL_RCC_OscConfig+0x348>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d014      	beq.n	800246e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fcca 	bl	8000ddc <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800244e:	f7fe fcc5 	bl	8000ddc <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	@ 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e17b      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002460:	4ba0      	ldr	r3, [pc, #640]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0xaa>
 800246c:	e013      	b.n	8002496 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fcb5 	bl	8000ddc <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002478:	f7fe fcb0 	bl	8000ddc <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e166      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	4b96      	ldr	r3, [pc, #600]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d100      	bne.n	80024a2 <HAL_RCC_OscConfig+0xfe>
 80024a0:	e086      	b.n	80025b0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b90      	ldr	r3, [pc, #576]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2238      	movs	r2, #56	@ 0x38
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12f      	bne.n	8002512 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e14c      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b89      	ldr	r3, [pc, #548]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a8b      	ldr	r2, [pc, #556]	@ (80026f0 <HAL_RCC_OscConfig+0x34c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	021a      	lsls	r2, r3, #8
 80024ce:	4b85      	ldr	r3, [pc, #532]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024da:	4b82      	ldr	r3, [pc, #520]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a85      	ldr	r2, [pc, #532]	@ (80026f4 <HAL_RCC_OscConfig+0x350>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	4b7e      	ldr	r3, [pc, #504]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024ee:	4b7d      	ldr	r3, [pc, #500]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0adb      	lsrs	r3, r3, #11
 80024f4:	2207      	movs	r2, #7
 80024f6:	4013      	ands	r3, r2
 80024f8:	4a7f      	ldr	r2, [pc, #508]	@ (80026f8 <HAL_RCC_OscConfig+0x354>)
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	4b7f      	ldr	r3, [pc, #508]	@ (80026fc <HAL_RCC_OscConfig+0x358>)
 80024fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002500:	4b7f      	ldr	r3, [pc, #508]	@ (8002700 <HAL_RCC_OscConfig+0x35c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe fc0d 	bl	8000d24 <HAL_InitTick>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d050      	beq.n	80025b0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e122      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d030      	beq.n	800257c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800251a:	4b72      	ldr	r3, [pc, #456]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	@ (80026f4 <HAL_RCC_OscConfig+0x350>)
 8002520:	4013      	ands	r3, r2
 8002522:	0019      	movs	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800252e:	4b6d      	ldr	r3, [pc, #436]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	0049      	lsls	r1, r1, #1
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fc4e 	bl	8000ddc <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002546:	f7fe fc49 	bl	8000ddc <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0ff      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	4b62      	ldr	r3, [pc, #392]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4013      	ands	r3, r2
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b5f      	ldr	r3, [pc, #380]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a61      	ldr	r2, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x34c>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e019      	b.n	80025b0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800257c:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b58      	ldr	r3, [pc, #352]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002582:	4960      	ldr	r1, [pc, #384]	@ (8002704 <HAL_RCC_OscConfig+0x360>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc28 	bl	8000ddc <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002592:	f7fe fc23 	bl	8000ddc <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d9      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a4:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2208      	movs	r2, #8
 80025b6:	4013      	ands	r3, r2
 80025b8:	d042      	beq.n	8002640 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025ba:	4b4a      	ldr	r3, [pc, #296]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2238      	movs	r2, #56	@ 0x38
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b18      	cmp	r3, #24
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d138      	bne.n	8002640 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0c2      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025da:	4b42      	ldr	r3, [pc, #264]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80025dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025de:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fbf9 	bl	8000ddc <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025f0:	f7fe fbf4 	bl	8000ddc <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0aa      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002602:	4b38      	ldr	r3, [pc, #224]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d0f1      	beq.n	80025f0 <HAL_RCC_OscConfig+0x24c>
 800260c:	e018      	b.n	8002640 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800260e:	4b35      	ldr	r3, [pc, #212]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002610:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002612:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002614:	2101      	movs	r1, #1
 8002616:	438a      	bics	r2, r1
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fbdf 	bl	8000ddc <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002624:	f7fe fbda 	bl	8000ddc <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e090      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002636:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d1f1      	bne.n	8002624 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2204      	movs	r2, #4
 8002646:	4013      	ands	r3, r2
 8002648:	d100      	bne.n	800264c <HAL_RCC_OscConfig+0x2a8>
 800264a:	e084      	b.n	8002756 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	230f      	movs	r3, #15
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002654:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2238      	movs	r2, #56	@ 0x38
 800265a:	4013      	ands	r3, r2
 800265c:	2b20      	cmp	r3, #32
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d000      	beq.n	800266a <HAL_RCC_OscConfig+0x2c6>
 8002668:	e075      	b.n	8002756 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e074      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x2e0>
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002678:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800267c:	2101      	movs	r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x31a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x302>
 800268c:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800268e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 8002692:	2104      	movs	r1, #4
 8002694:	430a      	orrs	r2, r1
 8002696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800269a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x31a>
 80026a6:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80026a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80026b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026b6:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <HAL_RCC_OscConfig+0x340>)
 80026b8:	2104      	movs	r1, #4
 80026ba:	438a      	bics	r2, r1
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fb89 	bl	8000ddc <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fb84 	bl	8000ddc <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <HAL_RCC_OscConfig+0x364>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d915      	bls.n	800270c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e039      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	fffeffff 	.word	0xfffeffff
 80026ec:	fffbffff 	.word	0xfffbffff
 80026f0:	ffff80ff 	.word	0xffff80ff
 80026f4:	ffffc7ff 	.word	0xffffc7ff
 80026f8:	02dc6c00 	.word	0x02dc6c00
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004
 8002704:	fffffeff 	.word	0xfffffeff
 8002708:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_RCC_OscConfig+0x3bc>)
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	2202      	movs	r2, #2
 8002712:	4013      	ands	r3, r2
 8002714:	d0dc      	beq.n	80026d0 <HAL_RCC_OscConfig+0x32c>
 8002716:	e013      	b.n	8002740 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fb60 	bl	8000ddc <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002720:	e009      	b.n	8002736 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fb5b 	bl	8000ddc <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <HAL_RCC_OscConfig+0x3c0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e010      	b.n	8002758 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <HAL_RCC_OscConfig+0x3bc>)
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002740:	230f      	movs	r3, #15
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_OscConfig+0x3bc>)
 800274c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <HAL_RCC_OscConfig+0x3bc>)
 8002750:	4905      	ldr	r1, [pc, #20]	@ (8002768 <HAL_RCC_OscConfig+0x3c4>)
 8002752:	400a      	ands	r2, r1
 8002754:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	00001388 	.word	0x00001388
 8002768:	efffffff 	.word	0xefffffff

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0df      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d91e      	bls.n	80027cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b6e      	ldr	r3, [pc, #440]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2207      	movs	r2, #7
 8002794:	4393      	bics	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	4b6b      	ldr	r3, [pc, #428]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fb1c 	bl	8000ddc <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027a8:	e009      	b.n	80027be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027aa:	f7fe fb17 	bl	8000ddc <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	4a65      	ldr	r2, [pc, #404]	@ (800294c <HAL_RCC_ClockConfig+0x1e0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0c0      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027be:	4b62      	ldr	r3, [pc, #392]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d017      	beq.n	8002806 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	4013      	ands	r3, r2
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a5b      	ldr	r2, [pc, #364]	@ (8002954 <HAL_RCC_ClockConfig+0x1e8>)
 80027e6:	401a      	ands	r2, r3
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 80027ea:	21b0      	movs	r1, #176	@ 0xb0
 80027ec:	0109      	lsls	r1, r1, #4
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f2:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_RCC_ClockConfig+0x1ec>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d04b      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002818:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	4013      	ands	r3, r2
 8002822:	d11f      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e08b      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b47      	ldr	r3, [pc, #284]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4013      	ands	r3, r2
 800283a:	d113      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e07f      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d106      	bne.n	8002856 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002848:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 800284a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d108      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e074      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002856:	4b3e      	ldr	r3, [pc, #248]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e06d      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2207      	movs	r2, #7
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fab0 	bl	8000ddc <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7fe faab 	bl	8000ddc <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a2f      	ldr	r2, [pc, #188]	@ (800294c <HAL_RCC_ClockConfig+0x1e0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e054      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2e      	ldr	r3, [pc, #184]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2238      	movs	r2, #56	@ 0x38
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2207      	movs	r2, #7
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d21e      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2207      	movs	r2, #7
 80028bc:	4393      	bics	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fa88 	bl	8000ddc <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d0:	e009      	b.n	80028e6 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f7fe fa83 	bl	8000ddc <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <HAL_RCC_ClockConfig+0x1e0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e02c      	b.n	8002940 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e6:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_RCC_ClockConfig+0x1dc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ee      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028fe:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002912:	f000 f82b 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002916:	0001      	movs	r1, r0
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_ClockConfig+0x1e4>)
 800291a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	220f      	movs	r2, #15
 8002920:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_RCC_ClockConfig+0x1f4>)
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002928:	221f      	movs	r2, #31
 800292a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800292c:	000a      	movs	r2, r1
 800292e:	40da      	lsrs	r2, r3
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_RCC_ClockConfig+0x1fc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7fe f9f3 	bl	8000d24 <HAL_InitTick>
 800293e:	0003      	movs	r3, r0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	00001388 	.word	0x00001388
 8002950:	40021000 	.word	0x40021000
 8002954:	ffff84ff 	.word	0xffff84ff
 8002958:	fffff0ff 	.word	0xfffff0ff
 800295c:	ffff8fff 	.word	0xffff8fff
 8002960:	08003174 	.word	0x08003174
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002972:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2238      	movs	r2, #56	@ 0x38
 8002978:	4013      	ands	r3, r2
 800297a:	d10f      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x78>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0adb      	lsrs	r3, r3, #11
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	0013      	movs	r3, r2
 800298c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	4815      	ldr	r0, [pc, #84]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002992:	f7fd fbb9 	bl	8000108 <__udivsi3>
 8002996:	0003      	movs	r3, r0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	e01e      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x78>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2238      	movs	r2, #56	@ 0x38
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x80>)
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	e015      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x78>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2238      	movs	r2, #56	@ 0x38
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d103      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	e00b      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x78>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2238      	movs	r2, #56	@ 0x38
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b18      	cmp	r3, #24
 80029cc:	d103      	bne.n	80029d6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029ce:	23fa      	movs	r3, #250	@ 0xfa
 80029d0:	01db      	lsls	r3, r3, #7
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	e001      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80029da:	687b      	ldr	r3, [r7, #4]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	02dc6c00 	.word	0x02dc6c00
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029f8:	2313      	movs	r3, #19
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a00:	2312      	movs	r3, #18
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2240      	movs	r2, #64	@ 0x40
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d100      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002a12:	e079      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a14:	2011      	movs	r0, #17
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a20:	2380      	movs	r3, #128	@ 0x80
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	4013      	ands	r3, r2
 8002a26:	d110      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a2e:	2180      	movs	r1, #128	@ 0x80
 8002a30:	0549      	lsls	r1, r1, #21
 8002a32:	430a      	orrs	r2, r1
 8002a34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a36:	4b5d      	ldr	r3, [pc, #372]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	183b      	adds	r3, r7, r0
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a4e:	23c0      	movs	r3, #192	@ 0xc0
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4013      	ands	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d019      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d014      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002a66:	4b51      	ldr	r3, [pc, #324]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a70:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a74:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0249      	lsls	r1, r1, #9
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a84:	494b      	ldr	r1, [pc, #300]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002a8a:	4b48      	ldr	r3, [pc, #288]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d016      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe f9a0 	bl	8000ddc <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002aa0:	e00c      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe f99b 	bl	8000ddc <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	4a42      	ldr	r2, [pc, #264]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d904      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002ab2:	2313      	movs	r3, #19
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	701a      	strb	r2, [r3, #0]
          break;
 8002aba:	e004      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002abc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d0ed      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002ac6:	2313      	movs	r3, #19
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	4a36      	ldr	r2, [pc, #216]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae4:	e005      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2213      	movs	r2, #19
 8002aec:	18ba      	adds	r2, r7, r2
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002af2:	2311      	movs	r3, #17
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b02:	492e      	ldr	r1, [pc, #184]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b12:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	2203      	movs	r2, #3
 8002b18:	4393      	bics	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b40:	430a      	orrs	r2, r1
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	0899      	lsrs	r1, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2204      	movs	r2, #4
 8002b66:	4013      	ands	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2280      	movs	r2, #128	@ 0x80
 8002b84:	4013      	ands	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002b88:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22e0      	movs	r2, #224	@ 0xe0
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b006      	add	sp, #24
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	fffffcff 	.word	0xfffffcff
 8002bb4:	fffeffff 	.word	0xfffeffff
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	efffffff 	.word	0xefffffff
 8002bc0:	ffffcfff 	.word	0xffffcfff
 8002bc4:	ffff3fff 	.word	0xffff3fff

08002bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e04a      	b.n	8002c70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223d      	movs	r2, #61	@ 0x3d
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	223c      	movs	r2, #60	@ 0x3c
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fd ffcf 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223d      	movs	r2, #61	@ 0x3d
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	0019      	movs	r1, r3
 8002c08:	0010      	movs	r0, r2
 8002c0a:	f000 f90b 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2248      	movs	r2, #72	@ 0x48
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223e      	movs	r2, #62	@ 0x3e
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223f      	movs	r2, #63	@ 0x3f
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2240      	movs	r2, #64	@ 0x40
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2241      	movs	r2, #65	@ 0x41
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2242      	movs	r2, #66	@ 0x42
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2243      	movs	r2, #67	@ 0x43
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2244      	movs	r2, #68	@ 0x44
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2245      	movs	r2, #69	@ 0x45
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2246      	movs	r2, #70	@ 0x46
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2247      	movs	r2, #71	@ 0x47
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223d      	movs	r2, #61	@ 0x3d
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223c      	movs	r2, #60	@ 0x3c
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_ConfigClockSource+0x20>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0bc      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x19a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	223c      	movs	r2, #60	@ 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223d      	movs	r2, #61	@ 0x3d
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	@ (8002e1c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4a59      	ldr	r2, [pc, #356]	@ (8002e20 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2280      	movs	r2, #128	@ 0x80
 8002cce:	0192      	lsls	r2, r2, #6
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d040      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xde>
 8002cd4:	2280      	movs	r2, #128	@ 0x80
 8002cd6:	0192      	lsls	r2, r2, #6
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d900      	bls.n	8002cde <HAL_TIM_ConfigClockSource+0x66>
 8002cdc:	e088      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	0152      	lsls	r2, r2, #5
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_TIM_ConfigClockSource+0x70>
 8002ce6:	e088      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x182>
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	0152      	lsls	r2, r2, #5
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d900      	bls.n	8002cf2 <HAL_TIM_ConfigClockSource+0x7a>
 8002cf0:	e07e      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cf2:	2b70      	cmp	r3, #112	@ 0x70
 8002cf4:	d018      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0xb0>
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_ConfigClockSource+0x82>
 8002cf8:	e07a      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2b60      	cmp	r3, #96	@ 0x60
 8002cfc:	d04f      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x126>
 8002cfe:	d900      	bls.n	8002d02 <HAL_TIM_ConfigClockSource+0x8a>
 8002d00:	e076      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d02:	2b50      	cmp	r3, #80	@ 0x50
 8002d04:	d03b      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x106>
 8002d06:	d900      	bls.n	8002d0a <HAL_TIM_ConfigClockSource+0x92>
 8002d08:	e072      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d0a:	2b40      	cmp	r3, #64	@ 0x40
 8002d0c:	d057      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x146>
 8002d0e:	d900      	bls.n	8002d12 <HAL_TIM_ConfigClockSource+0x9a>
 8002d10:	e06e      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d12:	2b30      	cmp	r3, #48	@ 0x30
 8002d14:	d063      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d16:	d86b      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d060      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d1c:	d868      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d05d      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d05b      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d26:	e063      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d38:	f000 f962 	bl	8003000 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2277      	movs	r2, #119	@ 0x77
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e052      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d66:	f000 f94b 	bl	8003000 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2180      	movs	r1, #128	@ 0x80
 8002d76:	01c9      	lsls	r1, r1, #7
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
      break;
 8002d7c:	e03e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	f000 f8bc 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2150      	movs	r1, #80	@ 0x50
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f916 	bl	8002fc8 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e02e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002daa:	001a      	movs	r2, r3
 8002dac:	f000 f8da 	bl	8002f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2160      	movs	r1, #96	@ 0x60
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 f906 	bl	8002fc8 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e01e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	001a      	movs	r2, r3
 8002dcc:	f000 f89c 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2140      	movs	r1, #64	@ 0x40
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f8f6 	bl	8002fc8 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e00e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f000 f8ed 	bl	8002fc8 <TIM_ITRx_SetConfig>
      break;
 8002dee:	e005      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002df0:	230f      	movs	r3, #15
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002dfa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223d      	movs	r2, #61	@ 0x3d
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223c      	movs	r2, #60	@ 0x3c
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]

  return status;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	ffceff88 	.word	0xffceff88
 8002e20:	ffff00ff 	.word	0xffff00ff

08002e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef0 <TIM_Base_SetConfig+0xcc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_Base_SetConfig+0x20>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef4 <TIM_Base_SetConfig+0xd0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d108      	bne.n	8002e56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2270      	movs	r2, #112	@ 0x70
 8002e48:	4393      	bics	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a25      	ldr	r2, [pc, #148]	@ (8002ef0 <TIM_Base_SetConfig+0xcc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00f      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	@ (8002ef4 <TIM_Base_SetConfig+0xd0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a23      	ldr	r2, [pc, #140]	@ (8002ef8 <TIM_Base_SetConfig+0xd4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <TIM_Base_SetConfig+0xd8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <TIM_Base_SetConfig+0xdc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <TIM_Base_SetConfig+0xe0>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	4393      	bics	r3, r2
 8002e96:	001a      	movs	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef0 <TIM_Base_SetConfig+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <TIM_Base_SetConfig+0xa4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <TIM_Base_SetConfig+0xd8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xa4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f00 <TIM_Base_SetConfig+0xdc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	46c0      	nop			@ (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40002000 	.word	0x40002000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	fffffcff 	.word	0xfffffcff

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4393      	bics	r3, r2
 8002f22:	001a      	movs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	22f0      	movs	r2, #240	@ 0xf0
 8002f32:	4393      	bics	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	220a      	movs	r2, #10
 8002f44:	4393      	bics	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	621a      	str	r2, [r3, #32]
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b006      	add	sp, #24
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	001a      	movs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <TIM_TI2_ConfigInputStage+0x60>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	22a0      	movs	r2, #160	@ 0xa0
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	ffff0fff 	.word	0xffff0fff

08002fc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a08      	ldr	r2, [pc, #32]	@ (8002ffc <TIM_ITRx_SetConfig+0x34>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b004      	add	sp, #16
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	ffcfff8f 	.word	0xffcfff8f

08003000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4a09      	ldr	r2, [pc, #36]	@ (800303c <TIM_ETR_SetConfig+0x3c>)
 8003018:	4013      	ands	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	431a      	orrs	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	46c0      	nop			@ (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b006      	add	sp, #24
 800303a:	bd80      	pop	{r7, pc}
 800303c:	ffff00ff 	.word	0xffff00ff

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223c      	movs	r2, #60	@ 0x3c
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e04a      	b.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	223c      	movs	r2, #60	@ 0x3c
 800305c:	2101      	movs	r1, #1
 800305e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	223d      	movs	r2, #61	@ 0x3d
 8003064:	2102      	movs	r1, #2
 8003066:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003086:	4013      	ands	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2270      	movs	r2, #112	@ 0x70
 8003098:	4393      	bics	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10c      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	4393      	bics	r3, r2
 80030c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	223d      	movs	r2, #61	@ 0x3d
 80030e0:	2101      	movs	r1, #1
 80030e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	223c      	movs	r2, #60	@ 0x3c
 80030e8:	2100      	movs	r1, #0
 80030ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	ff0fffff 	.word	0xff0fffff
 8003100:	40000400 	.word	0x40000400

08003104 <memset>:
 8003104:	0003      	movs	r3, r0
 8003106:	1882      	adds	r2, r0, r2
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	7019      	strb	r1, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	2600      	movs	r6, #0
 8003118:	4c0c      	ldr	r4, [pc, #48]	@ (800314c <__libc_init_array+0x38>)
 800311a:	4d0d      	ldr	r5, [pc, #52]	@ (8003150 <__libc_init_array+0x3c>)
 800311c:	1b64      	subs	r4, r4, r5
 800311e:	10a4      	asrs	r4, r4, #2
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	2600      	movs	r6, #0
 8003126:	f000 f819 	bl	800315c <_init>
 800312a:	4c0a      	ldr	r4, [pc, #40]	@ (8003154 <__libc_init_array+0x40>)
 800312c:	4d0a      	ldr	r5, [pc, #40]	@ (8003158 <__libc_init_array+0x44>)
 800312e:	1b64      	subs	r4, r4, r5
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	00b3      	lsls	r3, r6, #2
 800313a:	58eb      	ldr	r3, [r5, r3]
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	00b3      	lsls	r3, r6, #2
 8003144:	58eb      	ldr	r3, [r5, r3]
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	080031b4 	.word	0x080031b4
 8003150:	080031b4 	.word	0x080031b4
 8003154:	080031b8 	.word	0x080031b8
 8003158:	080031b4 	.word	0x080031b4

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
